## -*- encoding: utf-8 -*-
## This file (geom_pk1.sagetex.sage) was *autogenerated* from geom_pk1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('geom_pk1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = 78
_st_.blockbegin()
try:
 # Разложение вектора по векторам
 p11=zero_vector(3)
 q11=p11
 r11=p11
 mpqr11 = matrix([p11, q11, r11])
 while p11==zero_vector(3) or q11==zero_vector(3) or r11==zero_vector(3) or det(mpqr11)==0:
     p11 = vector([randint(-7, 7) for i in range(3)])
     q11 = vector([randint(-3, 3) for i in range(3)])
     r11 = vector([randint(-10, 10) for i in range(3)])
     mpqr11 = matrix([p11, q11, r11])
 coord11 = vector([0,0,0])
 while coord11 == vector([0,0,0]) :
     coord11 = vector([randint(-4, 4) for i in range(3)])
 x11 = coord11[0]*p11 + coord11[1]*q11 + coord11[2]*r11
 # Найти периметр и площадь треугольника на векторах a и b
 var('u,v,m,n')
 u12=zero_vector(3)
 v12=u12
 while u12==zero_vector(3) or v12==zero_vector(3) or u12.cross_product(v12)==zero_vector(3):
  u12 = vector([randint(-3, 4) for i in range(3)])
  v12 = vector([randint(-4, 3) for i in range(3)])
 basisuv12 = vector([u,v])
 acoord12=zero_vector(2)
 bcoord12=zero_vector(2)
 mab12 = matrix([acoord12, bcoord12])
 while acoord12[0]==0 or acoord12[1]==0 or bcoord12[0]==0 or bcoord12[1]==0 or det(mab12)==0:
  acoord12 = vector([randint(-3, 4) for i in range(2)])
  bcoord12 = vector([randint(-4, 3) for i in range(2)])
  mab12 = matrix([acoord12, bcoord12])
 a12print=basisuv12.dot_product(acoord12)
 b12print=basisuv12.dot_product(bcoord12)
 a12=acoord12[0]*u12+acoord12[1]*v12
 b12=bcoord12[0]*u12+bcoord12[1]*v12
 S12=(a12.cross_product(b12)).norm()/2
 P12=a12.norm()+b12.norm()+(b12-a12).norm()
 # угол между диагоналями треугольника
 normm13=randint(1,4)
 normn13=randint(1,3)
 Set13 = FiniteEnumeratedSet([30,45,60,90,135,120,150]) # углы в градусах
 ang13 = Set13.random_element() # случайный угол
 basismn13 = vector([m,n])
 acoord13=zero_vector(2)
 bcoord13=zero_vector(2)
 mab13 = matrix([acoord13, bcoord13])
 while acoord13==zero_vector(2) or bcoord13==zero_vector(2) or det(mab13)==0:
     acoord13 = vector([randint(-3, 4) for i in range(2)])
     bcoord13 = vector([randint(-4, 3) for i in range(2)])
     mab13 = matrix([acoord13, bcoord13])
 a13print=basismn13.dot_product(acoord13)
 b13print=basismn13.dot_product(bcoord13)
 d1coord13=acoord13+bcoord13
 d2coord13=acoord13-bcoord13
 d1d2dot13=d1coord13[0]*d2coord13[0]*normm13^2+(d1coord13[0]*d2coord13[1]+d1coord13[1]*d2coord13[0])*normm13*normn13*cos(ang13*pi/180)+d1coord13[1]*d2coord13[1]*normn13^2
 d1norm13=sqrt(d1coord13[0]^2*normm13^2+d1coord13[1]^2*normn13^2+2*d1coord13[0]*d1coord13[1]*normm13*normn13*cos(ang13*pi/180))
 d2norm13=sqrt(d2coord13[0]^2*normm13^2+d2coord13[1]^2*normn13^2+2*d2coord13[0]*d2coord13[1]*normm13*normn13*cos(ang13*pi/180))
 d1d2ang13=d1d2dot13/(d1norm13*d2norm13)
 # длина вектора и направляющие косинусы
 A14=zero_vector(3)
 B14=A14
 C14=A14
 mABC14 = matrix([A14, B14, C14])
 while A14==zero_vector(3) or B14==zero_vector(3) or C14==zero_vector(3) or det(mABC14)==0:
     A14 = vector([randint(-7, 7) for i in range(3)])
     B14 = vector([randint(-3, 3) for i in range(3)])
     C14 = vector([randint(-5, 5) for i in range(3)])
     mABC14 = matrix([A14, B14, C14])
 AC14=C14-A14
 AB14=B14-A14
 BC14=C14-B14
 Set14 = {'AB':AB14,'BC':BC14,'AC':AC14, 'BA':-AB14,'CB':-BC14,'CA':-AC14}
 import random
 vec114=random.choice(Set14.keys())
 vec214=vec114
 while vec214==vec114 or Set14[vec114].cross_product(Set14[vec214])==zero_vector(3):
     vec214=random.choice(Set14.keys())
 c14=randint(2,3)
 p14=c14*(Set14[vec114].cross_product(Set14[vec214]))
 p14norm=p14.norm()
 p14cos=p14/p14.norm()
 # Проверка компланарности векторов
 ch15 = randint(1,2) #1 - ЛЗ, #2 ЛНЗ
 if ch15==1 :
     a15 = vector([randint(-7, 7) for i in range(3)])
     b15 = vector([randint(-3, 3) for i in range(3)])
     c15 = randint(-5,5)*a15 + randint(-5,5)*b15
 else :
     a15 = vector([randint(-7, 7) for i in range(3)])
     b15 = vector([randint(-3, 3) for i in range(3)])
     c15 = vector([randint(-5, 5) for i in range(3)])
 abc15 = c15.dot_product(a15.cross_product(b15))
 if abc15 == 0 :
     compl15 = r"компланарны"
 else :
     compl15 = r"не компланарны"
except:
 _st_.goboom(173)
_st_.blockend()
try:
 _st_.current_tex_line = 4
 _st_.inline(0, latex(x11))
except:
 _st_.goboom(4)
try:
 _st_.current_tex_line = 4
 _st_.inline(1, latex(p11))
except:
 _st_.goboom(4)
try:
 _st_.current_tex_line = 4
 _st_.inline(2, latex(q11))
except:
 _st_.goboom(4)
try:
 _st_.current_tex_line = 4
 _st_.inline(3, latex(r11))
except:
 _st_.goboom(4)
try:
 _st_.current_tex_line = 10
 _st_.inline(4, latex(a12print))
except:
 _st_.goboom(10)
try:
 _st_.current_tex_line = 10
 _st_.inline(5, latex(b12print))
except:
 _st_.goboom(10)
try:
 _st_.current_tex_line = 10
 _st_.inline(6, latex(u12))
except:
 _st_.goboom(10)
try:
 _st_.current_tex_line = 10
 _st_.inline(7, latex(v12))
except:
 _st_.goboom(10)
try:
 _st_.current_tex_line = 17
 _st_.inline(8, latex(a13print))
except:
 _st_.goboom(17)
try:
 _st_.current_tex_line = 17
 _st_.inline(9, latex(b13print))
except:
 _st_.goboom(17)
try:
 _st_.current_tex_line = 17
 _st_.inline(10, latex(normm13))
except:
 _st_.goboom(17)
try:
 _st_.current_tex_line = 17
 _st_.inline(11, latex(normn13))
except:
 _st_.goboom(17)
try:
 _st_.current_tex_line = 17
 _st_.inline(12, latex(ang13))
except:
 _st_.goboom(17)
try:
 _st_.current_tex_line = 23
 _st_.inline(13, latex(A14))
except:
 _st_.goboom(23)
try:
 _st_.current_tex_line = 23
 _st_.inline(14, latex(B14))
except:
 _st_.goboom(23)
try:
 _st_.current_tex_line = 23
 _st_.inline(15, latex(C14))
except:
 _st_.goboom(23)
try:
 _st_.current_tex_line = 23
 _st_.inline(16, latex(c14))
except:
 _st_.goboom(23)
try:
 _st_.current_tex_line = 23
 _st_.inline(17, vec114)
except:
 _st_.goboom(23)
try:
 _st_.current_tex_line = 23
 _st_.inline(18, vec214)
except:
 _st_.goboom(23)
try:
 _st_.current_tex_line = 31
 _st_.inline(19, latex(a15))
except:
 _st_.goboom(31)
try:
 _st_.current_tex_line = 31
 _st_.inline(20, latex(b15))
except:
 _st_.goboom(31)
try:
 _st_.current_tex_line = 31
 _st_.inline(21, latex(c15))
except:
 _st_.goboom(31)
try:
 _st_.current_tex_line = 185
 _st_.inline(22, latex(coord11[0]))
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(23, latex(coord11[1]))
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(24, latex(coord11[2]))
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(25, latex(S12))
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(26, latex(P12))
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(27, latex(d1d2ang13))
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(28, latex(p14norm))
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(29, latex(p14cos))
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(30, compl15)
except:
 _st_.goboom(185)
try:
 _st_.current_tex_line = 185
 _st_.inline(31, latex(abc15))
except:
 _st_.goboom(185)
_st_.endofdoc()
