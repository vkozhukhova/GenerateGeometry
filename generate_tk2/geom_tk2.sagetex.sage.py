## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file geom_tk2.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_43 = Integer(43); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_360 = Integer(360); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_19 = Integer(19); _sage_const_24 = Integer(24); _sage_const_369 = Integer(369); _sage_const_40 = Integer(40); _sage_const_41 = Integer(41); _sage_const_42 = Integer(42); _sage_const_32 = Integer(32); _sage_const_44 = Integer(44); _sage_const_45 = Integer(45); _sage_const_46 = Integer(46); _sage_const_47 = Integer(47); _sage_const_48 = Integer(48); _sage_const_85 = Integer(85); _sage_const_1p5 = RealNumber('1.5'); _sage_const_27 = Integer(27); _sage_const_33 = Integer(33); _sage_const_429 = Integer(429); _sage_const_401 = Integer(401); _sage_const_25 = Integer(25); _sage_const_39 = Integer(39); _sage_const_313 = Integer(313); _sage_const_180 = Integer(180); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_31 = Integer(31); _sage_const_30 = Integer(30); _sage_const_320 = Integer(320); _sage_const_18 = Integer(18); _sage_const_35 = Integer(35); _sage_const_34 = Integer(34); _sage_const_37 = Integer(37); _sage_const_50 = Integer(50); _sage_const_36 = Integer(36); _sage_const_384 = Integer(384); _sage_const_38 = Integer(38); _sage_const_417 = Integer(417); _sage_const_49 = Integer(49)## This file (geom_tk2.sagetex.sage) was *autogenerated* from geom_tk2.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('geom_tk2', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_85 
_st_.blockbegin()
try:
 # 1) Вычислить площадь треугольника и найти длину высоты из вершины ??.
 A = vector([randint(-_sage_const_7 , _sage_const_7 ) for i in range(_sage_const_2 )])
 B = vector([randint(-_sage_const_4 , _sage_const_4 ) for i in range(_sage_const_2 )])
 C = vector([randint(-_sage_const_10 , _sage_const_10 ) for i in range(_sage_const_2 )])
 AB = B-A
 AC = C-A
 BC = C-B
 crossm = matrix([AB, AC])
 while det(crossm)==_sage_const_0  :
       C = vector([randint(-_sage_const_10 , _sage_const_10 ) for i in range(_sage_const_2 )])
       AC = C-A
       BC = C-B
       crossm = matrix([AB, AC])
 SABC= abs(det(crossm)/_sage_const_2 )
 ch1 = randint(_sage_const_1 ,_sage_const_3 )
 if ch1 == _sage_const_1  :
    vertex = r"A"
    hABC = _sage_const_2 *SABC/BC.norm()
 else :
    if ch1 == _sage_const_2  :
       vertex = r"B"
       hABC = _sage_const_2 *SABC/AC.norm()
    else :
       vertex = r"C"
       hABC = _sage_const_2 *SABC/AB.norm()
 Gtriag=points([A,B,C], size=_sage_const_50 , color='black', figsize=_sage_const_4 )+line((A,B), color='black', figsize=_sage_const_4 )+line((A,C), color='black', figsize=_sage_const_4 )+line((B,C), color='black', figsize=_sage_const_4 )
 # 2) Центр масс треугольника и углы
 angA = arccos(AB.dot_product(AC)/(AB.norm()*AC.norm()))
 angB = arccos((-AB).dot_product(BC)/(AB.norm()*BC.norm()))
 angC = arccos((-AC).dot_product(-BC)/(AC.norm()*BC.norm()))
 angres = []
 if (angA==angB) or (angA==angC) or (angB==angC):
    angres.append(r"равнобедренный")
 else :
    angres.append(r"не равнобедренный")
 if (angA==pi/_sage_const_2 ) or (angB==pi/_sage_const_2 ) or (angC==pi/_sage_const_2 ):
    angres.append(r"прямоугольный")
 else :
    angres.append(r"не прямоугольный")
 # 3) Длина биссектрисы при вершине ...
 if ch1 == _sage_const_1  : # вершина A
    lambd = AB.norm()/AC.norm()
    D = vector([(B[_sage_const_0 ]+lambd*C[_sage_const_0 ])/(_sage_const_1 +lambd), (B[_sage_const_1 ]+lambd*C[_sage_const_1 ])/(_sage_const_1 +lambd)])
    AD = D-A
    biss = AD.norm()
 else :
    if ch1 == _sage_const_2  : # вершина B
       lambd = BC.norm()/AB.norm()
       D = vector([(C[_sage_const_0 ]+lambd*A[_sage_const_0 ])/(_sage_const_1 +lambd), (C[_sage_const_1 ]+lambd*A[_sage_const_1 ])/(_sage_const_1 +lambd)])
       BD = D-B
       biss = BD.norm()
    else : # вершина C
       lambd = AC.norm()/BC.norm()
       D = vector([(A[_sage_const_0 ]+lambd*B[_sage_const_0 ])/(_sage_const_1 +lambd), (A[_sage_const_1 ]+lambd*B[_sage_const_1 ])/(_sage_const_1 +lambd)])
       CD = D-C
       biss = CD.norm()
 # 4) Перенос  и поворот системы координат
 S = FiniteEnumeratedSet([pi/_sage_const_6 , pi/_sage_const_4 , pi/_sage_const_3 , pi/_sage_const_2 , _sage_const_2 *pi/_sage_const_3 , _sage_const_3 *pi/_sage_const_4 , _sage_const_5 *pi/_sage_const_6 , _sage_const_7 *pi/_sage_const_6 , _sage_const_5 *pi/_sage_const_4 , _sage_const_4 *pi/_sage_const_3 , _sage_const_3 *pi/_sage_const_2 ,_sage_const_5 *pi/_sage_const_3 ,_sage_const_7 *pi/_sage_const_4 ,_sage_const_11 *pi/_sage_const_6 , arctan(_sage_const_3 /_sage_const_4 ), arctan(_sage_const_5 /_sage_const_12 ), arctan(_sage_const_4 /_sage_const_3 ), arctan(_sage_const_12 /_sage_const_5 ), arctan(_sage_const_8 /_sage_const_15 ), arctan(_sage_const_15 /_sage_const_8 ), arctan(_sage_const_7 /_sage_const_24 ), arctan(_sage_const_24 /_sage_const_7 )])
 ang = S.random_element()
 rotm = Matrix([[cos(ang), -sin(ang)],[sin(ang),cos(ang)]])
 if ch1 == _sage_const_1  :
    An = vector([_sage_const_0 ,_sage_const_0 ])
    Bn = rotm.inverse()*AB
    Cn = rotm.inverse()*AC
 else :
    if ch1 == _sage_const_2  :
       Bn = vector([_sage_const_0 ,_sage_const_0 ])
       An = rotm.inverse()*(-AB)
       Cn = rotm.inverse()*BC
    else :
       Cn = vector([_sage_const_0 ,_sage_const_0 ])
       An = rotm.inverse()*(-AC)
       Bn = rotm.inverse()*(-BC)
 # Точки в ПСК и ДПСК
 def Polar_to_Cart(polar_v) :
     return vector([polar_v[_sage_const_0 ]*cos(polar_v[_sage_const_1 ]), polar_v[_sage_const_0 ]*sin(polar_v[_sage_const_1 ])])
 def Cart_to_Polar(cart_v):
     return vector([sqrt(cart_v[_sage_const_0 ]**_sage_const_2  + cart_v[_sage_const_1 ]**_sage_const_2 ), atan2(cart_v[_sage_const_1 ],cart_v[_sage_const_0 ])])
 M1 = vector([randint(-_sage_const_7 , _sage_const_7 ) for i in range(_sage_const_2 )])
 M2 = vector([randint(-_sage_const_4 , _sage_const_4 ) for i in range(_sage_const_2 )])
 M3 = vector([randint(-_sage_const_10 , _sage_const_10 ) for i in range(_sage_const_2 )])
 S1 = FiniteEnumeratedSet([pi/_sage_const_6 , pi/_sage_const_4 , pi/_sage_const_3 , pi/_sage_const_2 , _sage_const_2 *pi/_sage_const_3 , _sage_const_3 *pi/_sage_const_4 , _sage_const_5 *pi/_sage_const_6 , _sage_const_7 *pi/_sage_const_6 , _sage_const_5 *pi/_sage_const_4 , _sage_const_4 *pi/_sage_const_3 , _sage_const_3 *pi/_sage_const_2 ,_sage_const_5 *pi/_sage_const_3 ,_sage_const_7 *pi/_sage_const_4 ,_sage_const_11 *pi/_sage_const_6 ,pi,-pi/_sage_const_6 , -pi/_sage_const_4 , -pi/_sage_const_3 , -pi/_sage_const_2 , -_sage_const_2 *pi/_sage_const_3 , -_sage_const_3 *pi/_sage_const_4 , -_sage_const_5 *pi/_sage_const_6 , -_sage_const_7 *pi/_sage_const_6 , -_sage_const_5 *pi/_sage_const_4 , -_sage_const_4 *pi/_sage_const_3 , -_sage_const_3 *pi/_sage_const_2 ,-_sage_const_5 *pi/_sage_const_3 ,-_sage_const_7 *pi/_sage_const_4 ,-_sage_const_11 *pi/_sage_const_6 ,-pi])
 M4 = vector([randint(_sage_const_1 , _sage_const_10 ),S1.random_element()])
 M5 = vector([randint(_sage_const_1 , _sage_const_10 ),S1.random_element()])
 M6 = vector([randint(_sage_const_1 , _sage_const_10 ),S1.random_element()])
 M4C=Polar_to_Cart(M4)
 M5C=Polar_to_Cart(M5)
 M6C=Polar_to_Cart(M6)
 P2 = {'M1':M1,'M2':M2,'M3':M3,'M4':M4C,'M5':M5C,'M6':M6C}
 ymin=min(M1[_sage_const_1 ],M2[_sage_const_1 ],M3[_sage_const_1 ],M4C[_sage_const_1 ],M5C[_sage_const_1 ],M6C[_sage_const_1 ])
 ymax=max(M1[_sage_const_1 ],M2[_sage_const_1 ],M3[_sage_const_1 ],M4C[_sage_const_1 ],M5C[_sage_const_1 ],M6C[_sage_const_1 ])
 if sign(ymin) == sign(ymax):
    if sign(ymin)==-_sage_const_1 :
         ymax=abs(ymax)
    else :
         if sign(ymin)==_sage_const_0 :
            ymin=-_sage_const_5 
            ymax=_sage_const_5 
         else:
            ymin=-ymin
 xmin=min(M1[_sage_const_0 ],M2[_sage_const_0 ],M3[_sage_const_0 ],M4C[_sage_const_0 ],M5C[_sage_const_0 ],M6C[_sage_const_0 ])
 xmax=max(M1[_sage_const_0 ],M2[_sage_const_0 ],M3[_sage_const_0 ],M4C[_sage_const_0 ],M5C[_sage_const_0 ],M6C[_sage_const_0 ])
 if sign(xmin) == sign(xmax):
   if sign(xmin)==-_sage_const_1 :
      xmax=abs(xmax)
   else :
      if sign(xmin)==_sage_const_0 :
         xmin=-_sage_const_5 
         xmax=_sage_const_5 
      else:
         xmin=-xmin
 G1 = points(P2.values(), size = _sage_const_50 , color = 'black', aspect_ratio=_sage_const_1 , ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax, figsize=_sage_const_4 , xmin=_sage_const_1p5 *xmin,xmax=_sage_const_1p5 *xmax)
 i=_sage_const_0 
 for p in P2.keys():
     G1 += text('  %s'%p,P2.values()[i],horizontal_alignment='left',color='black')
     i=i+_sage_const_1 
 var('x,y,xc,yc,a,b')
 eleqn=((x-xc)**_sage_const_2 /a**_sage_const_2 +(y-yc)**_sage_const_2 /b**_sage_const_2 -_sage_const_1 ==_sage_const_0 )# уравнение эллипса в канон виде
 # первое задание - окружность в центром (0,0)
 a=sqrt(randint(_sage_const_1 ,_sage_const_10 )**_sage_const_2 /randint(_sage_const_1 ,_sage_const_10 )**_sage_const_2 )
 b=a
 xc=_sage_const_0 
 yc=_sage_const_0 
 el2=eleqn(xc=xc,yc=yc,a=a,b=b).expand()
 el3=el2.multiply_both_sides(el2.left().denominator()) # конечное уравнение окружности
 # окружность в ПСК
 var('rho, varphi')
 el4=el3.subs(x=rho*cos(varphi), y=rho*sin(varphi)).simplify_trig()
 # график окружности
 G2=implicit_plot(el3, (x,-_sage_const_1p5 *a,_sage_const_1p5 *a),(y,-_sage_const_1p5 *a,_sage_const_1p5 *a), axes='true', figsize=_sage_const_4 , color = 'black')
 # второе задание - окружность со смещенным центром
 a=sqrt(randint(_sage_const_1 ,_sage_const_10 )**_sage_const_2 /randint(_sage_const_1 ,_sage_const_10 )**_sage_const_2 )# положительное число
 ch2=randint(_sage_const_1 ,_sage_const_2 )
 if ch2 ==_sage_const_1  :
    a=a
 else :
    a=-a # можно и отрицательное
 b=a
 ch3 = randint(_sage_const_1 ,_sage_const_2 ) # сдвиг по X или по Y
 if ch3 ==_sage_const_1  :
    xc=a
    yc=_sage_const_0 
 else :
    xc=_sage_const_0 
    yc=a
 el5=eleqn(xc=xc,yc=yc,a=a,b=b).expand()
 el6=el5.multiply_both_sides(el5.left().denominator()).simplify() # конечное уравнение окружности
 # окружность в ПСК
 el7=el6.subs(x=rho*cos(varphi), y=rho*sin(varphi)).simplify_trig()
 el8=el7.divide_both_sides(rho).expand().solve(rho)[_sage_const_0 ]
 # график окружности
 if xc==_sage_const_0 :
    if yc<_sage_const_0 :
       ymax = abs(a/_sage_const_2 )
       ymin = _sage_const_2 *a
       xmin=a
       xmax=-a
    else:
       ymin = -a/_sage_const_2 
       ymax = _sage_const_2 *a
       xmin=-a
       xmax=a
 else:
    if xc<_sage_const_0 :
       xmax = abs(a/_sage_const_2 )
       xmin = _sage_const_2 *a
       ymin=a
       ymax=-a
    else:
       xmin = -a/_sage_const_2 
       xmax = _sage_const_2 *a
       ymin=-a
       ymax=a
 G3=implicit_plot(el6, (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax),(y,_sage_const_1p5 *ymin,_sage_const_1p5 *ymax), axes='true', figsize=_sage_const_4 , color = 'black')
 G3+=point((xc,yc), size=_sage_const_25 , color='black')
 G3 += text('  (%s,%s)'%(xc,yc),(xc+xc/_sage_const_3 ,yc-yc/_sage_const_3 ),horizontal_alignment='left',color='black')
 # лемнискаты
 a=sqrt(randint(_sage_const_1 ,_sage_const_10 )**_sage_const_2 /randint(_sage_const_1 ,_sage_const_10 )**_sage_const_2 )
 ch4=randint(_sage_const_1 ,_sage_const_2 )
 if ch4 == _sage_const_1 :
    lemeqn = (x**_sage_const_2 +y**_sage_const_2 )**_sage_const_2 ==_sage_const_2 *a**_sage_const_2 *(x**_sage_const_2 -y**_sage_const_2 )
 else:
    lemeqn = (x**_sage_const_2 +y**_sage_const_2 )**_sage_const_2 ==_sage_const_4 *a**_sage_const_2 *x*y
 lem2=lemeqn.subs(x=rho*cos(varphi), y=rho*sin(varphi)).simplify_trig().divide_both_sides(rho**_sage_const_2 ).expand().reduce_trig()
 G4=implicit_plot(lemeqn, (x,-_sage_const_1p5 *a,_sage_const_1p5 *a),(y,-_sage_const_1p5 *a,_sage_const_1p5 *a), axes='true', figsize=_sage_const_4 , color = 'black')
 # спирали
 a=sqrt(randint(_sage_const_1 ,_sage_const_10 )**_sage_const_2 /randint(_sage_const_1 ,_sage_const_10 )**_sage_const_2 )
 ch5=randint(_sage_const_1 ,_sage_const_2 )
 if ch5 ==_sage_const_1  :
    a=a
 else :
    a=-a # можно и отрицательное
 spireqn=rho==a*varphi
 spi2=(spireqn.subs(rho=sqrt(x**_sage_const_2 +y**_sage_const_2 ), varphi=arctan(y/x)))**_sage_const_2 
 G5=polar_plot(a*x, (x,_sage_const_0 ,_sage_const_2 *pi), color='black', axes='true', figsize=_sage_const_3 )
 # кардиоида
 a=randint(_sage_const_1 ,_sage_const_10 )
 ch6=randint(_sage_const_1 ,_sage_const_4 )
 if ch6 ==_sage_const_1  :
    cardeqn = rho==a*(_sage_const_1 -sin(varphi))
 else :
    if ch6==_sage_const_2 :
       cardeqn = rho==a*(_sage_const_1 +sin(varphi))
    else:
       if ch6==_sage_const_3 :
          cardeqn = rho==a*(_sage_const_1 -cos(varphi))
       else:
          cardeqn = rho==a*(_sage_const_1 +cos(varphi))
 card2=cardeqn.subs(rho=sqrt(x**_sage_const_2 +y**_sage_const_2 ), varphi=arctan(y/x)).factor().canonicalize_radical().multiply_both_sides(sqrt(x**_sage_const_2  + y**_sage_const_2 ))
 if card2.right().coefficient(x,_sage_const_1 )==_sage_const_0 :
      card3=card2.subtract_from_both_sides(card2.right().coefficient(y,_sage_const_1 )*y)
 else:
      card3=card2.subtract_from_both_sides(card2.right().coefficient(x,_sage_const_1 )*x)
 card3=card3**_sage_const_2 
 G6=polar_plot(cardeqn.right(), (varphi,_sage_const_0 ,_sage_const_2 *pi), color='black', axes='true', figsize=_sage_const_3 )
 # полярная роза
 Spolar=FiniteEnumeratedSet([_sage_const_5 /_sage_const_2 ,-_sage_const_5 /_sage_const_2 ,_sage_const_3 /_sage_const_2 ,-_sage_const_3 /_sage_const_2 ,_sage_const_7 /_sage_const_2 ,-_sage_const_7 /_sage_const_2 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 ,_sage_const_5 ,_sage_const_6 ,_sage_const_7 ,-_sage_const_2 ,-_sage_const_3 ,-_sage_const_4 ,-_sage_const_5 ,-_sage_const_6 ,-_sage_const_7 ,-_sage_const_2 /_sage_const_3 ,_sage_const_2 /_sage_const_3 ])
 a=Spolar.random_element()
 b=randint(_sage_const_2 ,_sage_const_4 )
 ch7=randint(_sage_const_1 ,_sage_const_2 )
 if ch7==_sage_const_1 :
    roseeqn=rho==a*cos(b*varphi)
 else:
    roseeqn=rho==a*sin(b*varphi)
 ros2=((roseeqn.subs(rho=sqrt(x**_sage_const_2 +y**_sage_const_2 ), varphi=arctan(y/x)).simplify_trig().canonicalize_radical())**_sage_const_2 ).factor()
 ros3=ros2.multiply_both_sides(ros2.right().denominator())
 G7=polar_plot(roseeqn.right(), (varphi,_sage_const_0 ,_sage_const_2 *pi), color='black', axes='true', figsize=_sage_const_3 )
except:
 _st_.goboom(_sage_const_313 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_320 
 _st_.inline(_sage_const_0 , latex(A))
except:
 _st_.goboom(_sage_const_320 )
try:
 _st_.current_tex_line = _sage_const_320 
 _st_.inline(_sage_const_1 , latex(B))
except:
 _st_.goboom(_sage_const_320 )
try:
 _st_.current_tex_line = _sage_const_320 
 _st_.inline(_sage_const_2 , latex(C))
except:
 _st_.goboom(_sage_const_320 )
try:
 _st_.current_tex_line = _sage_const_320 
 _st_.inline(_sage_const_3 , vertex)
except:
 _st_.goboom(_sage_const_320 )
try:
 _st_.current_tex_line = _sage_const_360 
 _st_.inline(_sage_const_4 , vertex)
except:
 _st_.goboom(_sage_const_360 )
try:
 _st_.current_tex_line = _sage_const_369 
 _st_.inline(_sage_const_5 , vertex)
except:
 _st_.goboom(_sage_const_369 )
try:
 _st_.current_tex_line = _sage_const_369 
 _st_.inline(_sage_const_6 , latex(ang))
except:
 _st_.goboom(_sage_const_369 )
try:
 _st_.current_tex_line = _sage_const_384 
 _st_.inline(_sage_const_7 , latex(M1))
except:
 _st_.goboom(_sage_const_384 )
try:
 _st_.current_tex_line = _sage_const_384 
 _st_.inline(_sage_const_8 , latex(M2))
except:
 _st_.goboom(_sage_const_384 )
try:
 _st_.current_tex_line = _sage_const_384 
 _st_.inline(_sage_const_9 , latex(M3))
except:
 _st_.goboom(_sage_const_384 )
try:
 _st_.current_tex_line = _sage_const_384 
 _st_.inline(_sage_const_10 , latex(M4))
except:
 _st_.goboom(_sage_const_384 )
try:
 _st_.current_tex_line = _sage_const_384 
 _st_.inline(_sage_const_11 , latex(M5))
except:
 _st_.goboom(_sage_const_384 )
try:
 _st_.current_tex_line = _sage_const_384 
 _st_.inline(_sage_const_12 , latex(M6))
except:
 _st_.goboom(_sage_const_384 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_13 , latex(el3))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_14 , latex(el6))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_15 , latex(lemeqn))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_417 
 _st_.inline(_sage_const_16 , latex(spireqn))
except:
 _st_.goboom(_sage_const_417 )
try:
 _st_.current_tex_line = _sage_const_417 
 _st_.inline(_sage_const_17 , latex(cardeqn))
except:
 _st_.goboom(_sage_const_417 )
try:
 _st_.current_tex_line = _sage_const_417 
 _st_.inline(_sage_const_18 , latex(roseeqn))
except:
 _st_.goboom(_sage_const_417 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.plot(_sage_const_0 , format='notprovided', _p_=Gtriag)
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_19 , latex(SABC))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_20 , latex(hABC))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_21 , latex((A+B+C)/_sage_const_3 ))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_22 , latex((B+C)/_sage_const_2 -A))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_23 , latex((A+C)/_sage_const_2 -B))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_24 , latex((B+A)/_sage_const_2 -C))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_25 , latex(angA))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_26 , latex(round(angA*_sage_const_180 /pi)))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_27 , latex(angB))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_28 , latex(round(angB*_sage_const_180 /pi)))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_29 , latex(angC))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_30 , latex(round(angC*_sage_const_180 /pi)))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_31 , angres[_sage_const_0 ])
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_32 , angres[_sage_const_1 ])
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_33 , vertex)
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_34 , latex(biss))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_35 , latex(n(biss, digits=_sage_const_4 )))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_36 , latex(An))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_37 , latex(Bn))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_38 , latex(Cn))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_39 , latex(Cart_to_Polar(M1)))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_40 , latex(Cart_to_Polar(M2)))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_41 , latex(Cart_to_Polar(M3)))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_42 , latex(M4C))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_43 , latex(M5C))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_44 , latex(M6C))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.plot(_sage_const_1 , format='notprovided', _p_=G1)
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_45 , latex(el4.solve(rho)[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_46 , latex(el8))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_47 , latex(lem2))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.plot(_sage_const_2 , format='notprovided', _p_=G2)
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.plot(_sage_const_3 , format='notprovided', _p_=G3)
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.plot(_sage_const_4 , format='notprovided', _p_=G4)
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_48 , latex(spi2))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_49 , latex(card3))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.inline(_sage_const_50 , latex(ros3))
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.plot(_sage_const_5 , format='notprovided', _p_=G5)
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.plot(_sage_const_6 , format='notprovided', _p_=G6)
except:
 _st_.goboom(_sage_const_429 )
try:
 _st_.current_tex_line = _sage_const_429 
 _st_.plot(_sage_const_7 , format='notprovided', _p_=G7)
except:
 _st_.goboom(_sage_const_429 )
_st_.endofdoc()

