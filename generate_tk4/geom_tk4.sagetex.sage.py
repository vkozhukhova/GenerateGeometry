## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file geom_tk4.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_43 = Integer(43); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_363 = Integer(363); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_40 = Integer(40); _sage_const_41 = Integer(41); _sage_const_42 = Integer(42); _sage_const_18 = Integer(18); _sage_const_44 = Integer(44); _sage_const_45 = Integer(45); _sage_const_46 = Integer(46); _sage_const_47 = Integer(47); _sage_const_69 = Integer(69); _sage_const_33 = Integer(33); _sage_const_257 = Integer(257); _sage_const_32 = Integer(32); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_31 = Integer(31); _sage_const_30 = Integer(30); _sage_const_19 = Integer(19); _sage_const_240 = Integer(240); _sage_const_35 = Integer(35); _sage_const_34 = Integer(34); _sage_const_37 = Integer(37); _sage_const_36 = Integer(36); _sage_const_39 = Integer(39); _sage_const_38 = Integer(38)## This file (geom_tk4.sagetex.sage) was *autogenerated* from geom_tk4.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('geom_tk4', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_69 
_st_.blockbegin()
try:
 var('x,y,z')
 M1 = zero_vector(_sage_const_3 )
 M2 = M1
 M3 = M1
 a=M1
 b=M1
 p1=zero_vector(_sage_const_4 )
 p2=p1
 # если направляющий вектор нулевой, перегенерируем
 while (M1==M2) or (M1==M3) or (M2==M3) or (M1==zero_vector(_sage_const_3 )) or  (M2==zero_vector(_sage_const_3 )) or (M3==zero_vector(_sage_const_3 )):
   M1 = vector([randint(-_sage_const_5 , _sage_const_5 ) for i in range(_sage_const_3 )])
   M2 = vector([randint(-_sage_const_3 , _sage_const_3 ) for i in range(_sage_const_3 )])
   M3 = vector([randint(-_sage_const_7 , _sage_const_7 ) for i in range(_sage_const_3 )])
 while (a==b) or (a==zero_vector(_sage_const_3 )) or  (b==zero_vector(_sage_const_3 )) or ((M2-M1)==a):
   a = vector([randint(-_sage_const_5 , _sage_const_4 ) for i in range(_sage_const_3 )])
   b = vector([randint(-_sage_const_4 , _sage_const_5 ) for i in range(_sage_const_3 )])
 # составить уравнение плоскости по точке и двум векторам (3 компланарных вектора)
 def Make_Plane(point1,v1,v2):
     D=matrix([[x-point1[_sage_const_0 ],y-point1[_sage_const_1 ],z-point1[_sage_const_2 ]],[v1[_sage_const_0 ],v1[_sage_const_1 ],v1[_sage_const_2 ]],[v2[_sage_const_0 ],v2[_sage_const_1 ],v2[_sage_const_2 ]]])
     eqn = D.det()==_sage_const_0 
     return eqn
 def Simp_Plane(P):
     a=P.left().coefficient(x,_sage_const_1 )
     b=P.left().coefficient(y,_sage_const_1 )
     c=P.left().coefficient(z,_sage_const_1 )
     d=P.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ).coefficient(z,_sage_const_0 )
     P1=P.divide_both_sides(gcd((a,b,c,d)))
     return P1
 P1=Simp_Plane(Make_Plane(M1,M2-M1,M3-M1))
 P2=Simp_Plane(Make_Plane(M1,a,b))
 P3=Simp_Plane(Make_Plane(M1,M2-M1,a))
 a1=randint(-_sage_const_5 , _sage_const_4 )
 b1=randint(-_sage_const_4 , _sage_const_5 )
 c1=randint(-_sage_const_7 , _sage_const_7 )
 pointP=vector([randint(-_sage_const_5 , _sage_const_5 ) for i in range(_sage_const_3 )])
 P=a1*(x-pointP[_sage_const_0 ])+b1*(y-pointP[_sage_const_1 ])+c1*(z-pointP[_sage_const_2 ])==_sage_const_0 
 P=Simp_Plane(P)
 L_p1=x==_sage_const_0 
 L_p2=L_p1
 while (p1==p2) or (p1==zero_vector(_sage_const_4 )) or (p2==zero_vector(_sage_const_4 )) or (L_p1.left() == L_p2.left()):
   p1 = vector([randint(-_sage_const_5 , _sage_const_5 ) for i in range(_sage_const_4 )])
   p2 = vector([randint(-_sage_const_3 , _sage_const_3 ) for i in range(_sage_const_4 )])
   L_p1=Simp_Plane(p1[_sage_const_0 ]*x+p1[_sage_const_1 ]*y+p1[_sage_const_2 ]*z+p1[_sage_const_3 ]==_sage_const_0 )
   L_p2=Simp_Plane(p2[_sage_const_0 ]*x+p2[_sage_const_1 ]*y+p2[_sage_const_2 ]*z+p2[_sage_const_3 ]==_sage_const_0 )
 n=vector([a1,b1,c1])
 a2=P2.left().coefficient(x,_sage_const_1 )
 b2=P2.left().coefficient(y,_sage_const_1 )
 c2=P2.left().coefficient(z,_sage_const_1 )
 d2=P2.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ).coefficient(z,_sage_const_0 )
 n2=vector([a2,b2,c2])
 P4=Simp_Plane(Make_Plane(M1,n2,n))
 P5=Simp_Plane(a1*(x-M1[_sage_const_0 ])+b1*(y-M1[_sage_const_1 ])+c1*(z-M1[_sage_const_2 ])==_sage_const_0 )
 str_res=[]
 if (P.left().subs(x==M3[_sage_const_0 ],y==M3[_sage_const_1 ],z==M3[_sage_const_2 ])==_sage_const_0 ):
    str_res.append(r'')
 else:
    str_res.append(r'не')
 if (P.left().subs(x==M2[_sage_const_0 ],y==M2[_sage_const_1 ],z==M2[_sage_const_2 ])==_sage_const_0 ):
    str_res.append(r'')
 else:
    str_res.append(r'не')
 if (P4.left().subs(x==M3[_sage_const_0 ],y==M3[_sage_const_1 ],z==M3[_sage_const_2 ])==_sage_const_0 ):
    str_res.append('')
 else:
    str_res.append('не')
 if (P4.left().subs(x==M2[_sage_const_0 ],y==M2[_sage_const_1 ],z==M2[_sage_const_2 ])==_sage_const_0 ):
    str_res.append('')
 else:
    str_res.append('не')
 # вектор нормали
 a4=P4.left().coefficient(x,_sage_const_1 )
 b4=P4.left().coefficient(y,_sage_const_1 )
 c4=P4.left().coefficient(z,_sage_const_1 )
 d4=P4.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ).coefficient(z,_sage_const_0 )
 d1=P.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ).coefficient(z,_sage_const_0 )
 n4=vector([a4,b4,c4])
 # делим на +- длину нормального вектора
 if d4>_sage_const_0 :
    P4norm=P4.divide_both_sides(-n4.norm())
 else:
    P4norm=P4.divide_both_sides(n4.norm())
 if d1>_sage_const_0 :
    Pnorm=P.divide_both_sides(-n.norm())
 else:
    Pnorm=P.divide_both_sides(n.norm())
 # отклонения точек M2 и M3 от P и P4
 deltaM2P=Pnorm.left().subs(x==M2[_sage_const_0 ],y==M2[_sage_const_1 ],z==M2[_sage_const_2 ])
 deltaM2P4=P4norm.left().subs(x==M2[_sage_const_0 ],y==M2[_sage_const_1 ],z==M2[_sage_const_2 ])
 deltaM3P=Pnorm.left().subs(x==M3[_sage_const_0 ],y==M3[_sage_const_1 ],z==M3[_sage_const_2 ])
 deltaM3P4=P4norm.left().subs(x==M3[_sage_const_0 ],y==M3[_sage_const_1 ],z==M3[_sage_const_2 ])
 if str_res==['не','не','не','не']:
      if (sign(deltaM2P)==-sign(deltaM3P)) and (sign(deltaM2P4)==-sign(deltaM3P4)):
         angM2M3str=r"вертикальном" # вертикальные углы
      else:
         if (sign(deltaM2P)==sign(deltaM3P)) and (sign(deltaM2P4)==sign(deltaM3P4)):
             angM2M3str=r"одном" # один и тот же угол
         else:
             angM2M3str=r"смежном" # смежные углы
 else:
      angM2M3str=r"----"
 sL=(vector([p1[_sage_const_0 ],p1[_sage_const_1 ],p1[_sage_const_2 ]])).cross_product(vector([p2[_sage_const_0 ],p2[_sage_const_1 ],p2[_sage_const_2 ]]))
 ML=solve([L_p1.subs(z==_sage_const_0 ),L_p2.subs(z==_sage_const_0 )],x,y)[_sage_const_0 ]
 M2L=solve([L_p1.subs(z==_sage_const_1 ),L_p2.subs(z==_sage_const_1 )],x,y)[_sage_const_0 ]
 pointL=vector([ML[_sage_const_0 ].right(), ML[_sage_const_1 ].right(), _sage_const_0 ])
 point2L=vector([M2L[_sage_const_0 ].right(), M2L[_sage_const_1 ].right(), _sage_const_1 ])
 var('t')
 Lparam=(solve([x-pointL[_sage_const_0 ]==sL[_sage_const_0 ]*t,y-pointL[_sage_const_1 ]==sL[_sage_const_1 ]*t,z==sL[_sage_const_2 ]*t],x,y,z))[_sage_const_0 ]
 P1t=P1.subs(x==Lparam[_sage_const_0 ].right(),y==Lparam[_sage_const_1 ].right(),z==Lparam[_sage_const_2 ].right())
 tt=solve(P1t,t)[_sage_const_0 ].right()
 xLP1=Lparam[_sage_const_0 ].subs(t=tt)
 yLP1=Lparam[_sage_const_1 ].subs(t=tt)
 zLP1=Lparam[_sage_const_2 ].subs(t=tt)
 # запишем наши объекты через sympy
 from sympy import Plane, Point, Point3D, Line3D
 Psp=Plane(Point3D(pointP), normal_vector=n)
 M1sp=Point3D(M1)
 prtemp=Psp.projection(M1sp)
 # проекция M1 на P
 prM1P=vector([prtemp.x._sage_(),prtemp.y._sage_(),prtemp.z._sage_()])
 # наша L через sympy
 Lsp=Line3D(pointL, point2L)
 prtemp=Lsp.projection(M1sp)
 # проекция M1 на L
 prM1L=vector([prtemp.x._sage_(),prtemp.y._sage_(),prtemp.z._sage_()])
 # расстояние от M2 до P2
 P2sp=Plane(Point3D(M1), normal_vector=n2)
 dM2P2=P2sp.distance(Point3D(M2))
 # плоскость через M1 и L
 P6=Simp_Plane(Make_Plane(M1,pointL-M1,sL))
 # проекция L1 на P
 # уравнение L1 в параметрическом виде
 pointL1=vector([M2[_sage_const_0 ]+a[_sage_const_0 ],M2[_sage_const_1 ]+a[_sage_const_1 ],M2[_sage_const_2 ]+a[_sage_const_2 ]])
 M2sp=Point3D(M2)
 pointL1sp=Point3D(pointL1)
 # проекция M2 на P
 prtemp=Psp.projection(M2sp)
 prM2P=vector([prtemp.x._sage_(),prtemp.y._sage_(),prtemp.z._sage_()])
 # проекция pointL1 на P
 prtemp=Psp.projection(pointL1sp)
 prpointL1P=vector([prtemp.x._sage_(),prtemp.y._sage_(),prtemp.z._sage_()])
 prL1Pparam=(solve([x-prM2P[_sage_const_0 ]==(prpointL1P[_sage_const_0 ]-prM2P[_sage_const_0 ])*t,y-prM2P[_sage_const_1 ]==(prpointL1P[_sage_const_1 ]-prM2P[_sage_const_1 ])*t,z-prM2P[_sage_const_2 ]==(prpointL1P[_sage_const_2 ]-prM2P[_sage_const_2 ])*t],x,y,z))[_sage_const_0 ]
 L2sp=Line3D(Point3D(M2), Point3D(M3))
 # проверка на компланарность (=, пересекаются или параллельны)
 w=Point3D.are_coplanar(Point3D(pointL), Point3D(point2L), Point3D(M2), Point3D(M3))
 sL2=M3-M2
 sLL2=M2-pointL
 if w:
    if Line3D.is_parallel(Lsp,L2sp):
       strLL2=r"параллельны"
       dLL2=Lsp.distance(M2)
    else:
       if Line3D.is_similar(Lsp,L2sp):
          strLL2=r"совпадают"
          dLL2=_sage_const_0 
       else:
          strLL2=r"пересекаются"
          dLL2=_sage_const_0 
 else:
    strLL2=r"скрещиваются"
    dLL2=abs(sLL2.dot_product(sL.cross_product(sL2)))/(sL.cross_product(sL2)).norm()
 # уравнения биссектрис угла между плоскостями P и P4
 denom=gcd((n.norm(),n4.norm()))
 biss3=Pnorm.left()-P4norm.left()
 biss4=Pnorm.left()+P4norm.left()
 biss3=biss3.canonicalize_radical().mul(denom)
 biss4=biss4.canonicalize_radical().mul(denom)
 biss3=biss3.expand().collect(x).collect(y).collect(z)
 biss4=biss4.expand().collect(x).collect(y).collect(z)
 biss3=biss3.mul(biss3.denominator())
 biss4=biss4.mul(biss4.denominator())
except:
 _st_.goboom(_sage_const_240 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_257 
 _st_.inline(_sage_const_0 , latex(M1))
except:
 _st_.goboom(_sage_const_257 )
try:
 _st_.current_tex_line = _sage_const_257 
 _st_.inline(_sage_const_1 , latex(M2))
except:
 _st_.goboom(_sage_const_257 )
try:
 _st_.current_tex_line = _sage_const_257 
 _st_.inline(_sage_const_2 , latex(M3))
except:
 _st_.goboom(_sage_const_257 )
try:
 _st_.current_tex_line = _sage_const_257 
 _st_.inline(_sage_const_3 , latex(a))
except:
 _st_.goboom(_sage_const_257 )
try:
 _st_.current_tex_line = _sage_const_257 
 _st_.inline(_sage_const_4 , latex(b))
except:
 _st_.goboom(_sage_const_257 )
try:
 _st_.current_tex_line = _sage_const_257 
 _st_.inline(_sage_const_5 , latex(P))
except:
 _st_.goboom(_sage_const_257 )
try:
 _st_.current_tex_line = _sage_const_257 
 _st_.inline(_sage_const_6 , latex(L_p1))
except:
 _st_.goboom(_sage_const_257 )
try:
 _st_.current_tex_line = _sage_const_257 
 _st_.inline(_sage_const_7 , latex(L_p2))
except:
 _st_.goboom(_sage_const_257 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_8 , latex(P1))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_9 , latex(P2))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_10 , latex(P3))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_11 , latex(P4))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_12 , latex(P5))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_13 , str_res[_sage_const_0 ])
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_14 , str_res[_sage_const_1 ])
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_15 , str_res[_sage_const_2 ])
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_16 , str_res[_sage_const_3 ])
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_17 , angM2M3str)
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_18 , latex(x-pointL[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_19 , latex(sL[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_20 , latex(y-pointL[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_21 , latex(sL[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_22 , latex(sL[_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_23 , latex(Lparam))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_24 , latex(xLP1))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_25 , latex(yLP1))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_26 , latex(zLP1))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_27 , latex(prM1P))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_28 , latex(prM1L))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_29 , latex(x-M2[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_30 , latex(a[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_31 , latex(y-M2[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_32 , latex(a[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_33 , latex(z-M2[_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_34 , latex(a[_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_35 , latex(dM2P2._sage_()))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_36 , latex(P6))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_37 , latex(x-prM2P[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_38 , latex(prpointL1P[_sage_const_0 ]-prM2P[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_39 , latex(y-prM2P[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_40 , latex(prpointL1P[_sage_const_1 ]-prM2P[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_41 , latex(z-prM2P[_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_42 , latex(prpointL1P[_sage_const_2 ]-prM2P[_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_43 , latex(prL1Pparam))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_44 , strLL2)
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_45 , latex(dLL2))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_46 , latex(biss3))
except:
 _st_.goboom(_sage_const_363 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.inline(_sage_const_47 , latex(biss4))
except:
 _st_.goboom(_sage_const_363 )
_st_.endofdoc()

