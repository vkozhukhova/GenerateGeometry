## -*- encoding: utf-8 -*-
## This file (geom_tk4.sagetex.sage) was *autogenerated* from geom_tk4.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('geom_tk4', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = 69
_st_.blockbegin()
try:
 var('x,y,z')
 M1 = zero_vector(3)
 M2 = M1
 M3 = M1
 a=M1
 b=M1
 p1=zero_vector(4)
 p2=p1
 # если направляющий вектор нулевой, перегенерируем
 while (M1==M2) or (M1==M3) or (M2==M3) or (M1==zero_vector(3)) or  (M2==zero_vector(3)) or (M3==zero_vector(3)):
   M1 = vector([randint(-5, 5) for i in range(3)])
   M2 = vector([randint(-3, 3) for i in range(3)])
   M3 = vector([randint(-7, 7) for i in range(3)])
 while (a==b) or (a==zero_vector(3)) or  (b==zero_vector(3)) or ((M2-M1)==a):
   a = vector([randint(-5, 4) for i in range(3)])
   b = vector([randint(-4, 5) for i in range(3)])
 # составить уравнение плоскости по точке и двум векторам (3 компланарных вектора)
 def Make_Plane(point1,v1,v2):
     D=matrix([[x-point1[0],y-point1[1],z-point1[2]],[v1[0],v1[1],v1[2]],[v2[0],v2[1],v2[2]]])
     eqn = D.det()==0
     return eqn
 def Simp_Plane(P):
     a=P.left().coefficient(x,1)
     b=P.left().coefficient(y,1)
     c=P.left().coefficient(z,1)
     d=P.left().coefficient(x,0).coefficient(y,0).coefficient(z,0)
     P1=P.divide_both_sides(gcd((a,b,c,d)))
     return P1
 P1=Simp_Plane(Make_Plane(M1,M2-M1,M3-M1))
 P2=Simp_Plane(Make_Plane(M1,a,b))
 P3=Simp_Plane(Make_Plane(M1,M2-M1,a))
 a1=randint(-5, 4)
 b1=randint(-4, 5)
 c1=randint(-7, 7)
 pointP=vector([randint(-5, 5) for i in range(3)])
 P=a1*(x-pointP[0])+b1*(y-pointP[1])+c1*(z-pointP[2])==0
 P=Simp_Plane(P)
 L_p1=x==0
 L_p2=L_p1
 while (p1==p2) or (p1==zero_vector(4)) or (p2==zero_vector(4)) or (L_p1.left() == L_p2.left()):
   p1 = vector([randint(-5, 5) for i in range(4)])
   p2 = vector([randint(-3, 3) for i in range(4)])
   L_p1=Simp_Plane(p1[0]*x+p1[1]*y+p1[2]*z+p1[3]==0)
   L_p2=Simp_Plane(p2[0]*x+p2[1]*y+p2[2]*z+p2[3]==0)
 n=vector([a1,b1,c1])
 a2=P2.left().coefficient(x,1)
 b2=P2.left().coefficient(y,1)
 c2=P2.left().coefficient(z,1)
 d2=P2.left().coefficient(x,0).coefficient(y,0).coefficient(z,0)
 n2=vector([a2,b2,c2])
 P4=Simp_Plane(Make_Plane(M1,n2,n))
 P5=Simp_Plane(a1*(x-M1[0])+b1*(y-M1[1])+c1*(z-M1[2])==0)
 str_res=[]
 if (P.left().subs(x==M3[0],y==M3[1],z==M3[2])==0):
    str_res.append(r'')
 else:
    str_res.append(r'не')
 if (P.left().subs(x==M2[0],y==M2[1],z==M2[2])==0):
    str_res.append(r'')
 else:
    str_res.append(r'не')
 if (P4.left().subs(x==M3[0],y==M3[1],z==M3[2])==0):
    str_res.append('')
 else:
    str_res.append('не')
 if (P4.left().subs(x==M2[0],y==M2[1],z==M2[2])==0):
    str_res.append('')
 else:
    str_res.append('не')
 # вектор нормали
 a4=P4.left().coefficient(x,1)
 b4=P4.left().coefficient(y,1)
 c4=P4.left().coefficient(z,1)
 d4=P4.left().coefficient(x,0).coefficient(y,0).coefficient(z,0)
 d1=P.left().coefficient(x,0).coefficient(y,0).coefficient(z,0)
 n4=vector([a4,b4,c4])
 # делим на +- длину нормального вектора
 if d4>0:
    P4norm=P4.divide_both_sides(-n4.norm())
 else:
    P4norm=P4.divide_both_sides(n4.norm())
 if d1>0:
    Pnorm=P.divide_both_sides(-n.norm())
 else:
    Pnorm=P.divide_both_sides(n.norm())
 # отклонения точек M2 и M3 от P и P4
 deltaM2P=Pnorm.left().subs(x==M2[0],y==M2[1],z==M2[2])
 deltaM2P4=P4norm.left().subs(x==M2[0],y==M2[1],z==M2[2])
 deltaM3P=Pnorm.left().subs(x==M3[0],y==M3[1],z==M3[2])
 deltaM3P4=P4norm.left().subs(x==M3[0],y==M3[1],z==M3[2])
 if str_res==['не','не','не','не']:
      if (sign(deltaM2P)==-sign(deltaM3P)) and (sign(deltaM2P4)==-sign(deltaM3P4)):
         angM2M3str=r"вертикальном" # вертикальные углы
      else:
         if (sign(deltaM2P)==sign(deltaM3P)) and (sign(deltaM2P4)==sign(deltaM3P4)):
             angM2M3str=r"одном" # один и тот же угол
         else:
             angM2M3str=r"смежном" # смежные углы
 else:
      angM2M3str=r"----"
 sL=(vector([p1[0],p1[1],p1[2]])).cross_product(vector([p2[0],p2[1],p2[2]]))
 ML=solve([L_p1.subs(z==0),L_p2.subs(z==0)],x,y)[0]
 M2L=solve([L_p1.subs(z==1),L_p2.subs(z==1)],x,y)[0]
 pointL=vector([ML[0].right(), ML[1].right(), 0])
 point2L=vector([M2L[0].right(), M2L[1].right(), 1])
 var('t')
 Lparam=(solve([x-pointL[0]==sL[0]*t,y-pointL[1]==sL[1]*t,z==sL[2]*t],x,y,z))[0]
 P1t=P1.subs(x==Lparam[0].right(),y==Lparam[1].right(),z==Lparam[2].right())
 tt=solve(P1t,t)[0].right()
 xLP1=Lparam[0].subs(t=tt)
 yLP1=Lparam[1].subs(t=tt)
 zLP1=Lparam[2].subs(t=tt)
 # запишем наши объекты через sympy
 from sympy import Plane, Point, Point3D, Line3D
 Psp=Plane(Point3D(pointP), normal_vector=n)
 M1sp=Point3D(M1)
 prtemp=Psp.projection(M1sp)
 # проекция M1 на P
 prM1P=vector([prtemp.x._sage_(),prtemp.y._sage_(),prtemp.z._sage_()])
 # наша L через sympy
 Lsp=Line3D(pointL, point2L)
 prtemp=Lsp.projection(M1sp)
 # проекция M1 на L
 prM1L=vector([prtemp.x._sage_(),prtemp.y._sage_(),prtemp.z._sage_()])
 # расстояние от M2 до P2
 P2sp=Plane(Point3D(M1), normal_vector=n2)
 dM2P2=P2sp.distance(Point3D(M2))
 # плоскость через M1 и L
 P6=Simp_Plane(Make_Plane(M1,pointL-M1,sL))
 # проекция L1 на P
 # уравнение L1 в параметрическом виде
 pointL1=vector([M2[0]+a[0],M2[1]+a[1],M2[2]+a[2]])
 M2sp=Point3D(M2)
 pointL1sp=Point3D(pointL1)
 # проекция M2 на P
 prtemp=Psp.projection(M2sp)
 prM2P=vector([prtemp.x._sage_(),prtemp.y._sage_(),prtemp.z._sage_()])
 # проекция pointL1 на P
 prtemp=Psp.projection(pointL1sp)
 prpointL1P=vector([prtemp.x._sage_(),prtemp.y._sage_(),prtemp.z._sage_()])
 prL1Pparam=(solve([x-prM2P[0]==(prpointL1P[0]-prM2P[0])*t,y-prM2P[1]==(prpointL1P[1]-prM2P[1])*t,z-prM2P[2]==(prpointL1P[2]-prM2P[2])*t],x,y,z))[0]
 L2sp=Line3D(Point3D(M2), Point3D(M3))
 # проверка на компланарность (=, пересекаются или параллельны)
 w=Point3D.are_coplanar(Point3D(pointL), Point3D(point2L), Point3D(M2), Point3D(M3))
 sL2=M3-M2
 sLL2=M2-pointL
 if w:
    if Line3D.is_parallel(Lsp,L2sp):
       strLL2=r"параллельны"
       dLL2=Lsp.distance(M2)
    else:
       if Line3D.is_similar(Lsp,L2sp):
          strLL2=r"совпадают"
          dLL2=0
       else:
          strLL2=r"пересекаются"
          dLL2=0
 else:
    strLL2=r"скрещиваются"
    dLL2=abs(sLL2.dot_product(sL.cross_product(sL2)))/(sL.cross_product(sL2)).norm()
 # уравнения биссектрис угла между плоскостями P и P4
 denom=gcd((n.norm(),n4.norm()))
 biss3=Pnorm.left()-P4norm.left()
 biss4=Pnorm.left()+P4norm.left()
 biss3=biss3.canonicalize_radical().mul(denom)
 biss4=biss4.canonicalize_radical().mul(denom)
 biss3=biss3.expand().collect(x).collect(y).collect(z)
 biss4=biss4.expand().collect(x).collect(y).collect(z)
 biss3=biss3.mul(biss3.denominator())
 biss4=biss4.mul(biss4.denominator())
except:
 _st_.goboom(240)
_st_.blockend()
try:
 _st_.current_tex_line = 257
 _st_.inline(0, latex(M1))
except:
 _st_.goboom(257)
try:
 _st_.current_tex_line = 257
 _st_.inline(1, latex(M2))
except:
 _st_.goboom(257)
try:
 _st_.current_tex_line = 257
 _st_.inline(2, latex(M3))
except:
 _st_.goboom(257)
try:
 _st_.current_tex_line = 257
 _st_.inline(3, latex(a))
except:
 _st_.goboom(257)
try:
 _st_.current_tex_line = 257
 _st_.inline(4, latex(b))
except:
 _st_.goboom(257)
try:
 _st_.current_tex_line = 257
 _st_.inline(5, latex(P))
except:
 _st_.goboom(257)
try:
 _st_.current_tex_line = 257
 _st_.inline(6, latex(L_p1))
except:
 _st_.goboom(257)
try:
 _st_.current_tex_line = 257
 _st_.inline(7, latex(L_p2))
except:
 _st_.goboom(257)
try:
 _st_.current_tex_line = 363
 _st_.inline(8, latex(P1))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(9, latex(P2))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(10, latex(P3))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(11, latex(P4))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(12, latex(P5))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(13, str_res[0])
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(14, str_res[1])
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(15, str_res[2])
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(16, str_res[3])
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(17, angM2M3str)
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(18, latex(x-pointL[0]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(19, latex(sL[0]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(20, latex(y-pointL[1]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(21, latex(sL[1]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(22, latex(sL[2]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(23, latex(Lparam))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(24, latex(xLP1))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(25, latex(yLP1))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(26, latex(zLP1))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(27, latex(prM1P))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(28, latex(prM1L))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(29, latex(x-M2[0]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(30, latex(a[0]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(31, latex(y-M2[1]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(32, latex(a[1]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(33, latex(z-M2[2]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(34, latex(a[2]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(35, latex(dM2P2._sage_()))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(36, latex(P6))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(37, latex(x-prM2P[0]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(38, latex(prpointL1P[0]-prM2P[0]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(39, latex(y-prM2P[1]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(40, latex(prpointL1P[1]-prM2P[1]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(41, latex(z-prM2P[2]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(42, latex(prpointL1P[2]-prM2P[2]))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(43, latex(prL1Pparam))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(44, strLL2)
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(45, latex(dLL2))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(46, latex(biss3))
except:
 _st_.goboom(363)
try:
 _st_.current_tex_line = 363
 _st_.inline(47, latex(biss4))
except:
 _st_.goboom(363)
_st_.endofdoc()
