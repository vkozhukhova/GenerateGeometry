## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file geom_tk3.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_548 = Integer(548); _sage_const_43 = Integer(43); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_55 = Integer(55); _sage_const_65 = Integer(65); _sage_const_57 = Integer(57); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_59 = Integer(59); _sage_const_56 = Integer(56); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_135 = Integer(135); _sage_const_41 = Integer(41); _sage_const_42 = Integer(42); _sage_const_32 = Integer(32); _sage_const_44 = Integer(44); _sage_const_45 = Integer(45); _sage_const_60 = Integer(60); _sage_const_47 = Integer(47); _sage_const_48 = Integer(48); _sage_const_49 = Integer(49); _sage_const_52 = Integer(52); _sage_const_63 = Integer(63); _sage_const_1p5 = RealNumber('1.5'); _sage_const_40 = Integer(40); _sage_const_597 = Integer(597); _sage_const_58 = Integer(58); _sage_const_0p5 = RealNumber('0.5'); _sage_const_51 = Integer(51); _sage_const_150 = Integer(150); _sage_const_575 = Integer(575); _sage_const_33 = Integer(33); _sage_const_647 = Integer(647); _sage_const_39 = Integer(39); _sage_const_620 = Integer(620); _sage_const_54 = Integer(54); _sage_const_180 = Integer(180); _sage_const_53 = Integer(53); _sage_const_64 = Integer(64); _sage_const_66 = Integer(66); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_31 = Integer(31); _sage_const_30 = Integer(30); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_35 = Integer(35); _sage_const_34 = Integer(34); _sage_const_37 = Integer(37); _sage_const_50 = Integer(50); _sage_const_36 = Integer(36); _sage_const_120 = Integer(120); _sage_const_62 = Integer(62); _sage_const_46 = Integer(46); _sage_const_73 = Integer(73); _sage_const_38 = Integer(38); _sage_const_527 = Integer(527); _sage_const_90 = Integer(90); _sage_const_674 = Integer(674); _sage_const_61 = Integer(61)## This file (geom_tk3.sagetex.sage) was *autogenerated* from geom_tk3.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('geom_tk3', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_73 
_st_.blockbegin()
try:
 # генерируем точки М1 и М2
 M1 = vector([randint(-_sage_const_7 , _sage_const_7 ) for i in range(_sage_const_2 )])
 M2 = vector([randint(-_sage_const_4 , _sage_const_4 ) for i in range(_sage_const_2 )])
 # если направляющий вектор нулевой, перегенерируем
 while M1==M2:
  M2 = vector([randint(-_sage_const_4 , _sage_const_4 ) for i in range(_sage_const_2 )])
 # генерируем угол альфа
 S3 = FiniteEnumeratedSet([_sage_const_30 ,_sage_const_45 ,_sage_const_60 ,_sage_const_90 ,_sage_const_135 ,_sage_const_120 ,_sage_const_150 ]) # углы в градусах
 ang = S3.random_element() # случайный угол
 # направляющий вектор
 M1M2=M2-M1
 var('x,y,t')
 # если в уравнении нет переменной y
 if M1M2[_sage_const_0 ]==_sage_const_0 :
    eqcan=x-M1[_sage_const_0 ]==_sage_const_0  # каноническое
    eqline=eqcan # общее
    eqparam=eqcan.left()==t
    eqparam=(solve(eqparam,x))[_sage_const_0 ] # параметрическое
    eqang=eqline # с угловым коэффициентом
    ccoef=-M1[_sage_const_0 ] # константа в уравнении
    if M1[_sage_const_0 ]==_sage_const_0 :
      eqotr=eqline # в отрезках чтоб не было деления на ноль
    else:
      eqotr=x/M1[_sage_const_0 ]==_sage_const_1  # в отрезках
 else :
    # если в уравнении нет переменной x
    if M1M2[_sage_const_1 ]==_sage_const_0 :
       eqcan=y-M1[_sage_const_1 ]==_sage_const_0  # каноническое
       eqline=eqcan # общее
       eqparam=eqcan.left()==t
       eqparam=(solve(eqparam,y))[_sage_const_0 ] # параметрическое
       eqang=solve(eqline,y)[_sage_const_0 ] # с угловым коэффициентом
       ccoef=-M1[_sage_const_1 ] # константа в уравнении
       if M1[_sage_const_1 ]==_sage_const_0 :
         eqotr=eqline  # в отрезках чтоб не было деления на ноль
       else:
         eqotr=y/M1[_sage_const_1 ]==_sage_const_1  # в отрезках
    else :
       # если в уравнении есть обе переменных x и y
       eqcan=(x-M1[_sage_const_0 ])/M1M2[_sage_const_0 ]==(y-M1[_sage_const_1 ])/M1M2[_sage_const_1 ] # каноническое
       eqparam=[eqcan.left()==t, eqcan.right()==t]
       eqparam=(solve(eqparam,x,y))[_sage_const_0 ] # параметрическое
       eqcan2=eqcan.subtract_from_both_sides(eqcan.right())
       eqline=eqcan2.multiply_both_sides(lcm(eqcan.left().denominator(), eqcan.right().denominator())) # общее
       eqang=solve(eqline,y)[_sage_const_0 ] # с угловым коэффициентом
       # коэффициенты уравнения
       ccoef=eqline.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 )
       acoef=eqline.left().coefficient(x,_sage_const_1 )
       bcoef=eqline.left().coefficient(y,_sage_const_1 )
       # проверка константа в уравнении = 0
       if ccoef==_sage_const_0 :
          eqotr=eqline # в отрезках чтоб не было деления на ноль
       else:
          eqotr=x/(-ccoef/acoef)+y/(-ccoef/bcoef)==_sage_const_1  # в отрезках
 # вектор нормали
 nl=vector([eqline.left().coefficient(x,_sage_const_1 ), eqline.left().coefficient(y,_sage_const_1 )])
 # делим на +- длину нормального вектора
 if ccoef>_sage_const_0 :
    eqnorm=eqline.divide_both_sides(-nl.norm())
 else:
    eqnorm=eqline.divide_both_sides(nl.norm())
 #  направляющие косинусы
 cosline=vector([eqnorm.left().coefficient(x,_sage_const_1 ), eqnorm.left().coefficient(y,_sage_const_1 )])
 #  прямая через М1 под углом альфа к Ох
 if ang==_sage_const_90 :
    eqang2=x==M1[_sage_const_0 ]
 else:
    eqang2=y-M1[_sage_const_1 ]==tan(ang*pi/_sage_const_180 )*(x-M1[_sage_const_0 ])
    eqang2=solve(eqang2,y)[_sage_const_0 ]
 # треугольник АВС
 crossm = zero_matrix(_sage_const_2 ,_sage_const_2 )
 while (det(crossm)==_sage_const_0 ) or (abs(det(crossm)/_sage_const_2 ) < _sage_const_8 ) :
   A = vector([randint(-_sage_const_7 , _sage_const_7 ) for i in range(_sage_const_2 )])
   B = vector([randint(-_sage_const_4 , _sage_const_4 ) for i in range(_sage_const_2 )])
   C = vector([randint(-_sage_const_10 , _sage_const_10 ) for i in range(_sage_const_2 )])
   AB = B-A
   AC = C-A
   BC = C-B
   crossm = matrix([AB, AC])
 chv=randint(_sage_const_1 ,_sage_const_3 ) # первая случайная вершина vertex1
 ch1=randint(_sage_const_1 ,_sage_const_2 ) # вторая случайная вершина vertex2
 # присваиваем координаты выбранным вершинам
 if chv == _sage_const_1  :
  vertex = r"A"
  V1=A
  if ch1==_sage_const_1 :
   vertex2=r"B"
   V2=B
   vertex3=r"C"
   V3=C
  else:
   vertex2=r"C"
   V2=C
   vertex3=r"B"
   V3=B
 else :
  if chv == _sage_const_2  :
   vertex = r"B"
   V1=B
   if ch1==_sage_const_1 :
    vertex2=r"A"
    V2=A
    vertex3=r"C"
    V3=C
   else:
    vertex2=r"C"
    V2=C
    vertex3=r"A"
    V3=A
  else :
   vertex = r"C"
   V1=C
   if ch1==_sage_const_1 :
    vertex2=r"B"
    V2=B
    vertex3=r"A"
    V3=A
   else:
    vertex2=r"A"
    V2=A
    vertex3=r"B"
    V3=B
 # генерируем L=line2
 a1=_sage_const_0 
 b1=_sage_const_0 
 c1=_sage_const_0 
 # чтобы не было нулевых коэф-в и точки АВС не лежали бы на L
 while (a1==_sage_const_0 ) or (b1==_sage_const_0 ) or (c1==_sage_const_0 ) or (a1*A[_sage_const_0 ]+b1*A[_sage_const_1 ]+c1==_sage_const_0 ) or (a1*B[_sage_const_0 ]+b1*B[_sage_const_1 ]+c1==_sage_const_0 ) or (a1*C[_sage_const_0 ]+b1*C[_sage_const_1 ]+c1==_sage_const_0 ) :
  a1=randint(-_sage_const_10 , _sage_const_10 )
  b1=randint(-_sage_const_10 , _sage_const_10 )
  c1=randint(-_sage_const_10 , _sage_const_10 )
  line2=a1*x+b1*y+c1==_sage_const_0 
 # уравнения через вершину параллельно и перпендикулярно line2=L
 nLx=line2.left().coefficient(x,_sage_const_1 )
 nLy=line2.left().coefficient(y,_sage_const_1 )
 # параллельно
 eqLparal=nLx*(x-V1[_sage_const_0 ])+nLy*(y-V1[_sage_const_1 ])==_sage_const_0 
 # перпендикулярно
 eqLorthog=(x-V1[_sage_const_0 ])/nLx-(y-V1[_sage_const_1 ])/nLy==_sage_const_0 
 eqLorthog=eqLorthog.multiply_both_sides(eqLorthog.left().denominator())
 # точка пересечения высот
 # высота через вершину V1
 h1=(V3[_sage_const_0 ]-V2[_sage_const_0 ])*(x-V1[_sage_const_0 ])+(V3[_sage_const_1 ]-V2[_sage_const_1 ])*(y-V1[_sage_const_1 ])==_sage_const_0 
 # высота через вершину V2
 h2=(V3[_sage_const_0 ]-V1[_sage_const_0 ])*(x-V2[_sage_const_0 ])+(V3[_sage_const_1 ]-V1[_sage_const_1 ])*(y-V2[_sage_const_1 ])==_sage_const_0 
 # точка пересечения высот
 h1h2=solve([h1,h2],x,y)
 hh=vector([h1h2[_sage_const_0 ][_sage_const_0 ].right(), h1h2[_sage_const_0 ][_sage_const_1 ].right()])
 # длина перпендикуляра из V1 на медиану из V2
 # направляющий вектор медианы
 smedx=(V3[_sage_const_0 ]+V1[_sage_const_0 ])/_sage_const_2 -V2[_sage_const_0 ]
 smedy=(V3[_sage_const_1 ]+V1[_sage_const_1 ])/_sage_const_2 -V2[_sage_const_1 ]
 # если одна из координат напр. вектора медианы = 0
 if smedx==_sage_const_0 :
  vert2med=x-V2[_sage_const_0 ]==_sage_const_0 
  vert1h=(y-V1[_sage_const_1 ])==_sage_const_0 
 else:
  if smedy==_sage_const_0 :
   vert2med=y-V2[_sage_const_1 ]==_sage_const_0 
   vert1h=(x-V1[_sage_const_0 ])==_sage_const_0 
  else:
   vert2med=(x-V2[_sage_const_0 ])/(smedx)-(y-V2[_sage_const_1 ])/(smedy)==_sage_const_0 
   vert1h=(x-V1[_sage_const_0 ])/vert2med.left().coefficient(x,_sage_const_1 )-(y-V1[_sage_const_1 ])/vert2med.left().coefficient(y,_sage_const_1 )==_sage_const_0 
 vert2med=vert2med.multiply_both_sides(vert2med.left().denominator())
 vert1h=vert1h.multiply_both_sides(vert1h.left().denominator())
 # точка пересечения медианы и перпендикуляра
 medh=solve([vert2med,vert1h],x,y)
 medh=vector([medh[_sage_const_0 ][_sage_const_0 ].right(), medh[_sage_const_0 ][_sage_const_1 ].right()])
 # длина перпендикуляра
 perp=(medh-V1).norm()
 # уравнения биссектрис угла между прямыми V1V2 и V1V3
 # V1V2
 V1V2=(x-V1[_sage_const_0 ])*(V2[_sage_const_1 ]-V1[_sage_const_1 ])-(y-V1[_sage_const_1 ])*(V2[_sage_const_0 ]-V1[_sage_const_0 ])==_sage_const_0 
 # V1V3
 V1V3=(x-V1[_sage_const_0 ])*(V3[_sage_const_1 ]-V1[_sage_const_1 ])-(y-V1[_sage_const_1 ])*(V3[_sage_const_0 ]-V1[_sage_const_0 ])==_sage_const_0 
 # вектор нормали V1V2
 nV1V2=vector([V1V2.left().coefficient(x,_sage_const_1 ), V1V2.left().coefficient(y,_sage_const_1 )])
 # вектор нормали V1V3
 nV1V3=vector([V1V3.left().coefficient(x,_sage_const_1 ), V1V3.left().coefficient(y,_sage_const_1 )])
 # делим на +- длину нормального вектора
 if V1V2.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 )>_sage_const_0 :
  v1v2norm=V1V2.divide_both_sides(-nV1V2.norm())
 else:
  v1v2norm=V1V2.divide_both_sides(nV1V2.norm())
 if V1V3.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 )>_sage_const_0 :
  v1v3norm=V1V3.divide_both_sides(-nV1V3.norm())
 else:
  v1v3norm=V1V3.divide_both_sides(nV1V3.norm())
 denom=gcd((nV1V2.norm(),nV1V3.norm()))
 biss1=v1v2norm.left()-v1v3norm.left()
 biss2=v1v2norm.left()+v1v3norm.left()
 biss1=biss1.canonicalize_radical().mul(denom)
 biss2=biss2.canonicalize_radical().mul(denom)
 biss1=biss1.expand().collect(x).collect(y)
 biss2=biss2.expand().collect(x).collect(y)
 biss1=biss1.mul(biss1.denominator())
 biss2=biss2.mul(biss2.denominator())
 if (sign(biss1.subs(x==V2[_sage_const_0 ],y==V2[_sage_const_1 ])))==(sign(biss1.subs(x==V3[_sage_const_0 ],y==V3[_sage_const_1 ]))):
  bissstr = r"внешнего"
 else:
  bissstr = r"внутреннего"
 # найти точку симметричную V1 относительно V2V3
 # V2V3
 V2V3=(x-V2[_sage_const_0 ])*(V3[_sage_const_1 ]-V2[_sage_const_1 ])-(y-V2[_sage_const_1 ])*(V3[_sage_const_0 ]-V2[_sage_const_0 ])==_sage_const_0 
 aV2V3=V2V3.left().coefficient(x,_sage_const_1 )
 bV2V3=V2V3.left().coefficient(y,_sage_const_1 )
 cV2V3=V2V3.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 )
 eq1=bV2V3*(x-V1[_sage_const_0 ])-aV2V3*(y-V1[_sage_const_1 ])==_sage_const_0 
 eq2=(aV2V3**_sage_const_2 +bV2V3**_sage_const_2 )*(x-V1[_sage_const_0 ])+_sage_const_2 *aV2V3*(aV2V3*V1[_sage_const_0 ]+bV2V3*V1[_sage_const_1 ]+cV2V3)==_sage_const_0 
 eq3=(aV2V3**_sage_const_2 +bV2V3**_sage_const_2 )*(y-V1[_sage_const_1 ])+_sage_const_2 *bV2V3*(aV2V3*V1[_sage_const_0 ]+bV2V3*V1[_sage_const_1 ]+cV2V3)==_sage_const_0 
 # точкa симметричная V1 относительно V2V3
 pp=vector([solve([eq1,eq2,eq3],x,y)[_sage_const_0 ][_sage_const_0 ].right(),solve([eq1,eq2,eq3],x,y)[_sage_const_0 ][_sage_const_1 ].right()])
 # график треугольника
 P1 = {'A':A,'B':B,'C':C}
 P2 = {'A':A,'B':B,'C':C, 'H':hh}
 P3 = {'A':A,'B':B,'C':C,'Q':pp}
 # настройка графика - минимум-максимум по отображаемым точкам
 def Min_Max_Values(P) :
     x=vector(QQ,[i for i in range(len(P.values()))])
     y=vector(QQ,[i for i in range(len(P.values()))])
     for i in range(len(P.values())):
         x[i]=P.values()[i][_sage_const_0 ]
         y[i]=P.values()[i][_sage_const_1 ]
     xmin=min(x)
     xmax=max(x)
     if sign(xmin) == sign(xmax):
        if sign(xmin)==-_sage_const_1 :
           xmax=abs(xmax)
        else :
           if sign(xmin)==_sage_const_0 :
              xmin=-_sage_const_10 
              xmax=_sage_const_10 
           else:
              xmin=-xmin
     ymin=min(y)
     ymax=max(y)
     if sign(ymin) == sign(ymax):
        if sign(ymin)==-_sage_const_1 :
           ymax=abs(ymax)
        else :
           if sign(ymin)==_sage_const_0 :
              ymin=-_sage_const_10 
              ymax=_sage_const_10 
           else:
              ymin=-ymin
     res = vector(QQ,[xmin,xmax,ymin,ymax])
     return res
 # min max graph 1-3
 mmg=Min_Max_Values(P1)
 xmin=mmg[_sage_const_0 ]
 xmax=mmg[_sage_const_1 ]
 ymin=mmg[_sage_const_2 ]
 ymax=mmg[_sage_const_3 ]
 # параллельно и перпендикулярно L
 G1=points(P1.values(), size=_sage_const_50 , color='black', figsize=_sage_const_4 , aspect_ratio=_sage_const_1 , xmin=_sage_const_1p5 *xmin, xmax=_sage_const_1p5 *xmax, ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax)+line((A,B), color='black')+line((A,C), color='black')+line((B,C), color='black')+plot(solve(eqLparal,y)[_sage_const_0 ].right(), (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax))+plot(solve(eqLorthog,y)[_sage_const_0 ].right(), (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax)) + plot(solve(line2,y)[_sage_const_0 ].right(), (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), color='red', legend_label='L')
 i=_sage_const_0 
 for p in P1.keys():
   G1 += text('  %s'%p,P1.values()[i],horizontal_alignment='left',color='black')
   i=i+_sage_const_1 
 # высоты и их точка пересечения
 mmg=Min_Max_Values(P2)
 xmin=mmg[_sage_const_0 ]
 xmax=mmg[_sage_const_1 ]
 ymin=mmg[_sage_const_2 ]
 ymax=mmg[_sage_const_3 ]
 G2=points(P2.values(), size=_sage_const_50 , color='black', figsize=_sage_const_4 , aspect_ratio=_sage_const_1 , xmin=_sage_const_1p5 *xmin, xmax=_sage_const_1p5 *xmax, ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax)+line((A,B), color='black')+line((A,C), color='black')+line((B,C), color='black')+plot(solve(h1,y)[_sage_const_0 ].right(), (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), legend_label='h1')+plot(solve(h2,y)[_sage_const_0 ].right(), (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), legend_label='h2')
 i=_sage_const_0 
 for p in P2.keys():
   G2 += text('  %s'%p,P2.values()[i],horizontal_alignment='left',color='black')
   i=i+_sage_const_1 
 # медиана и перпендикуляр
 #G3
 # биссектрисы и симметричная точка
 mmg=Min_Max_Values(P3)
 xmin=mmg[_sage_const_0 ]
 xmax=mmg[_sage_const_1 ]
 ymin=mmg[_sage_const_2 ]
 ymax=mmg[_sage_const_3 ]
 G4=points(P3.values(), size=_sage_const_50 , color='black', figsize=_sage_const_4 , aspect_ratio=_sage_const_1 , xmin=_sage_const_1p5 *xmin, xmax=_sage_const_1p5 *xmax, ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax)+line((A,B), color='black')+line((A,C), color='black')+line((B,C), color='black')+plot(solve(biss1==_sage_const_0 ,y)[_sage_const_0 ].right(), (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), legend_label='b1')+plot(solve(biss2==_sage_const_0 ,y)[_sage_const_0 ].right(), (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), color='red', legend_label='b2')
 i=_sage_const_0 
 for p in P3.keys():
  G4 += text('  %s'%p,P3.values()[i],horizontal_alignment='left',color='black')
  i=i+_sage_const_1 
  # генерируем L1 и L2
 a1=_sage_const_0 
 b1=_sage_const_0 
 c1=_sage_const_0 
 while (a1==_sage_const_0 ) or (b1==_sage_const_0 ) or (c1==_sage_const_0 ) :
   a1=randint(-_sage_const_10 , _sage_const_10 )
   b1=randint(-_sage_const_10 , _sage_const_10 )
   c1=randint(-_sage_const_10 , _sage_const_10 )
 lineL1=a1*x+b1*y+c1==_sage_const_0 
 a2=_sage_const_0 
 b2=_sage_const_0 
 c2=_sage_const_0 
 # они не должны быть параллельны
 while (a2==_sage_const_0 ) or (b2==_sage_const_0 ) or (c2==_sage_const_0 ) or (a1*b2-a2*b1==_sage_const_0 ):
   a2=randint(-_sage_const_10 , _sage_const_10 )
   b2=randint(-_sage_const_10 , _sage_const_10 )
   c2=randint(-_sage_const_10 , _sage_const_10 )
 lineL2=a2*x+b2*y+c2==_sage_const_0 
 # генерируем N
 N = vector([_sage_const_0 ,_sage_const_0 ])
 # он не должен на них лежать
 while (N==vector([_sage_const_0 ,_sage_const_0 ])) or (lineL1.left().subs(x==N[_sage_const_0 ],y==N[_sage_const_1 ])==_sage_const_0 ) or (lineL2.left().subs(x==N[_sage_const_0 ],y==N[_sage_const_1 ])==_sage_const_0 ):
    N = vector([randint(-_sage_const_10 , _sage_const_10 ) for i in range(_sage_const_2 )])
 # расстояние d
 d=randint(_sage_const_1 , _sage_const_10 )
 # K - точка пересечения L1 и L2
 K=vector([solve([lineL1,lineL2],x,y)[_sage_const_0 ][_sage_const_0 ].right(),solve([lineL1,lineL2],x,y)[_sage_const_0 ][_sage_const_1 ].right()])
 # N - середина KM, находим M
 M=vector([_sage_const_2 *N[_sage_const_0 ]-K[_sage_const_0 ],_sage_const_2 *N[_sage_const_1 ]-K[_sage_const_1 ]])
 # сторона парал-ма L3 - через M // L1
 lineL3=a1*(x-M[_sage_const_0 ])+b1*(y-M[_sage_const_1 ])==_sage_const_0 
 # сторона парал-ма L4 - через M // L3
 lineL4=a2*(x-M[_sage_const_0 ])+b2*(y-M[_sage_const_1 ])==_sage_const_0 
 # диагональ d1 =KM
 lined1=(x-K[_sage_const_0 ])*(M[_sage_const_1 ]-K[_sage_const_1 ])-(y-K[_sage_const_1 ])*(M[_sage_const_0 ]-K[_sage_const_0 ])==_sage_const_0 
 lined1=lined1.multiply_both_sides(lined1.left().denominator())
 lined1=lined1.divide_both_sides(gcd((lined1.left().coefficient(x,_sage_const_1 ), lined1.left().coefficient(y,_sage_const_1 ), lined1.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ))))
 # R - точка пересечения L1 и L4
 R=vector([solve([lineL1,lineL4],x,y)[_sage_const_0 ][_sage_const_0 ].right(),solve([lineL1,lineL4],x,y)[_sage_const_0 ][_sage_const_1 ].right()])
 # диагональ d2 = NR
 lined2=(x-N[_sage_const_0 ])*(R[_sage_const_1 ]-N[_sage_const_1 ])-(y-N[_sage_const_1 ])*(R[_sage_const_0 ]-N[_sage_const_0 ])==_sage_const_0 
 lined2=lined2.multiply_both_sides(lined2.left().denominator())
 lined2=lined2.divide_both_sides(gcd((lined2.left().coefficient(x,_sage_const_1 ), lined2.left().coefficient(y,_sage_const_1 ), lined2.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ))))
 # через N перпендикулярно L1 = сторона NE
 lineNE=(x-N[_sage_const_0 ])*b1-(y-N[_sage_const_1 ])*a1==_sage_const_0 
 lineNE=lineNE.multiply_both_sides(lineNE.left().denominator())
 lineNE=lineNE.divide_both_sides(gcd((lineNE.left().coefficient(x,_sage_const_1 ), lineNE.left().coefficient(y,_sage_const_1 ), lineNE.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ))))
 # через N перпендикулярно L2 = сторона NF
 lineNF=(x-N[_sage_const_0 ])*b2-(y-N[_sage_const_1 ])*a2==_sage_const_0 
 lineNF=lineNF.multiply_both_sides(lineNF.left().denominator())
 lineNF=lineNF.divide_both_sides(gcd((lineNF.left().coefficient(x,_sage_const_1 ), lineNF.left().coefficient(y,_sage_const_1 ), lineNF.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ))))
 # E - точка пересечения L2 и NE
 E=vector([solve([lineL2,lineNE],x,y)[_sage_const_0 ][_sage_const_0 ].right(),solve([lineL2,lineNE],x,y)[_sage_const_0 ][_sage_const_1 ].right()])
 # F - точка пересечения L1 и NF
 F=vector([solve([lineL1,lineNF],x,y)[_sage_const_0 ][_sage_const_0 ].right(),solve([lineL1,lineNF],x,y)[_sage_const_0 ][_sage_const_1 ].right()])
 # сторона EF
 lineEF=(x-E[_sage_const_0 ])*(F[_sage_const_1 ]-E[_sage_const_1 ])-(y-E[_sage_const_1 ])*(F[_sage_const_0 ]-E[_sage_const_0 ])==_sage_const_0 
 lineEF=lineEF.multiply_both_sides(lineEF.left().denominator())
 lineEF=lineEF.divide_both_sides(gcd((lineEF.left().coefficient(x,_sage_const_1 ), lineEF.left().coefficient(y,_sage_const_1 ), lineEF.left().coefficient(x,_sage_const_0 ).coefficient(y,_sage_const_0 ))))
 # для графика
 l1G=solve(lineL1,y)[_sage_const_0 ].right()
 l2G=solve(lineL2,y)[_sage_const_0 ].right()
 lNEG=solve(lineNE,y)[_sage_const_0 ].right()
 lNFG=solve(lineNF,y)[_sage_const_0 ].right()
 lEFG=solve(lineEF,y)[_sage_const_0 ].right()
 # график этих прямых и точек N, E, F
 P4 = {'N':N,'E':E,'F':F}
 mmg=Min_Max_Values(P4)
 xmin=mmg[_sage_const_0 ]
 xmax=mmg[_sage_const_1 ]
 ymin=mmg[_sage_const_2 ]
 ymax=mmg[_sage_const_3 ]
 G5=plot(l1G, (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), thickness=_sage_const_0p5 , color='red', ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax, figsize=_sage_const_4 , aspect_ratio=_sage_const_1 , legend_label='L1') + plot(l2G, (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), thickness=_sage_const_0p5 , color='green', ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax, legend_label='L2') + plot(lNEG, (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), thickness=_sage_const_0p5 , color='black', ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax) + plot(lNFG, (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), thickness=_sage_const_0p5 , color='black',ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax)+plot(lEFG, (x,_sage_const_1p5 *xmin,_sage_const_1p5 *xmax), thickness=_sage_const_0p5 , color='black', ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax)+ points(P4.values(), color='black', ymin=_sage_const_1p5 *ymin, ymax=_sage_const_1p5 *ymax, xmin=_sage_const_1p5 *xmin, xmax=_sage_const_1p5 *xmax)
 i=_sage_const_0 
 for p in P4.keys():
   G5 += text('  %s'%p,P4.values()[i],horizontal_alignment='left',color='black')
   i=i+_sage_const_1 
 # расстояние от точки N до прямой L1
 # вектор нормали
 nl1=vector([a1, b1])
 # делим на +- длину нормального вектора
 if c1>_sage_const_0 :
   lineL1norm=lineL1.divide_both_sides(-nl1.norm())
 else:
   lineL1norm=lineL1.divide_both_sides(nl1.norm())
 # расстояние
 dNL1=abs(lineL1norm.left().subs(x==N[_sage_const_0 ], y==N[_sage_const_1 ]))
 # вектор нормали
 nl2=vector([a2, b2])
 # делим на +- длину нормального вектора
 if c2>_sage_const_0 :
   lineL2norm=lineL2.divide_both_sides(-nl2.norm())
 else:
   lineL2norm=lineL2.divide_both_sides(nl2.norm())
 if sign(lineL2norm.left().subs(x==N[_sage_const_0 ], y==N[_sage_const_1 ])) == sign(lineL2norm.left().subs(x==_sage_const_0 , y==_sage_const_0 )):
   intercept=r"не"
 else:
   intercept=r""
 # уравнения прямых паралелльных L1
 var('cc')
 newL=a1*x+b1*y+cc==_sage_const_0 
 newLNorm=newL.divide_both_sides(sqrt(a1**_sage_const_2 +b1**_sage_const_2 ))
 U=vector([_sage_const_0 ,solve(lineL1.subs(x==_sage_const_0 ),y)[_sage_const_0 ].right()])
 eq1=newLNorm.left().subs(x==U[_sage_const_0 ],y==U[_sage_const_1 ])==d
 eq2=newLNorm.left().subs(x==U[_sage_const_0 ],y==U[_sage_const_1 ])==-d
 cc1=solve(eq1,cc)[_sage_const_0 ].right()
 cc2=solve(eq2,cc)[_sage_const_0 ].right()
 G6=plot(solve(lineL1,y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), aspect_ratio=_sage_const_1 , color='red', figsize=_sage_const_4 )+plot(solve(newL(cc=cc1),y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), aspect_ratio=_sage_const_1 , figsize=_sage_const_4 )+plot(solve(newL(cc=cc2),y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), aspect_ratio=_sage_const_1 , figsize=_sage_const_4 )
 # квадрат
 # сторона Lp через N перпендикулярно L1 ( = NE)
 lineLp=lineNE
 ap=lineLp.left().coefficient(x,_sage_const_1 )
 bp=lineLp.left().coefficient(y,_sage_const_1 )
 # сторона Lq через N параллельно L1
 lineLq=a1*(x-N[_sage_const_0 ])+b1*(y-N[_sage_const_1 ])==_sage_const_0 
 # стороны Lr и Lt параллельно Lp на расстоянии dNL1
 lineLrt=ap*x+bp*y+cc==_sage_const_0 
 lineLrtNorm=lineLrt.divide_both_sides(sqrt(ap**_sage_const_2 +bp**_sage_const_2 ))
 eq1=lineLrtNorm.left().subs(x==N[_sage_const_0 ],y==N[_sage_const_1 ])==dNL1
 eq2=lineLrtNorm.left().subs(x==N[_sage_const_0 ],y==N[_sage_const_1 ])==-dNL1
 cc3=solve(eq1,cc)[_sage_const_0 ].right()
 cc4=solve(eq2,cc)[_sage_const_0 ].right()
 G7=plot(solve(lineL1,y)[_sage_const_0 ].right(), (x,-_sage_const_15 ,_sage_const_15 ), aspect_ratio=_sage_const_1 , color='red', figsize=_sage_const_4 , legend_label='L1', ymin=-_sage_const_20 , ymax=_sage_const_20 )+plot(solve(lineLrt(cc=cc3),y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), aspect_ratio=_sage_const_1 , figsize=_sage_const_4 )+plot(solve(lineLrt(cc=cc4),y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), aspect_ratio=_sage_const_1 , figsize=_sage_const_4 )+plot(solve(lineLp,y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), aspect_ratio=_sage_const_1 , color='green', figsize=_sage_const_4 )+plot(solve(lineLq,y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), aspect_ratio=_sage_const_1 , color='purple', figsize=_sage_const_4 )+ point(N, color='black', xmin=-_sage_const_10 , xmax=_sage_const_10 )+text('  N',N,horizontal_alignment='left',color='black')
 # угол между прямыми
 angL1L2=arccos(abs(nl1.dot_product(nl2)/(nl1.norm()*nl2.norm())))
 # отклонения точек O и N от L1 и L2
 deltaOL1=lineL1norm.left().subs(x==_sage_const_0 ,y==_sage_const_0 )
 deltaOL2=lineL2norm.left().subs(x==_sage_const_0 ,y==_sage_const_0 )
 deltaNL1=lineL1norm.left().subs(x==N[_sage_const_0 ],y==N[_sage_const_1 ])
 deltaNL2=lineL2norm.left().subs(x==N[_sage_const_0 ],y==N[_sage_const_1 ])
 # angO = 1 если O в остром углу и = 2 если в тупом
 n1orient=vector([lineL1norm.left().coefficient(x,_sage_const_1 ), lineL1norm.left().coefficient(y,_sage_const_1 )])
 n2orient=vector([lineL2norm.left().coefficient(x,_sage_const_1 ), lineL2norm.left().coefficient(y,_sage_const_1 )])
 if n1orient.dot_product(n2orient)>_sage_const_0 :
    angO = -_sage_const_1  # в тупом
 else:
    angO = _sage_const_1  # в остром, в т.ч. в прямом
 # взаимное расположение O и N
 if (sign(deltaOL1)==-sign(deltaNL1)) and (sign(deltaOL2)==-sign(deltaNL2)):
    angON = _sage_const_1  # вертикальные углы
    angN = angO # вертикальные углы
 else:
    if (sign(deltaOL1)==sign(deltaNL1)) and (sign(deltaOL2)==sign(deltaNL2)):
       angON = _sage_const_2  # один и тот же угол
       angN = angO
    else:
       angON = _sage_const_3  # смежные углы
       angN = -angO
 if angN==_sage_const_1 :
    angNstr=r"остром"
 else:
    angNstr=r"тупом"
 if angON==_sage_const_1 :
    angONstr=r"вертикальном"
 else:
    if angON==_sage_const_2 :
       angONstr=r"одном"
    else:
       angONstr=r"смежном"
 # уравнения биссектрис угла между прямыми L1 и L2
 denom=gcd((nl1.norm(),nl2.norm()))
 biss3=lineL1norm.left()-lineL2norm.left()
 biss4=lineL1norm.left()+lineL2norm.left()
 biss3=biss3.canonicalize_radical().mul(denom)
 biss4=biss4.canonicalize_radical().mul(denom)
 biss3=biss3.expand().collect(x).collect(y)
 biss4=biss4.expand().collect(x).collect(y)
 biss3=biss3.mul(biss3.denominator())
 biss4=biss4.mul(biss4.denominator())
 G8=plot(l1G, (x,-_sage_const_10 ,_sage_const_10 ), color='red', figsize=_sage_const_4 , aspect_ratio=_sage_const_1 , legend_label='L1', ymin=-_sage_const_15 , ymax=_sage_const_15 ) + plot(l2G, (x,-_sage_const_10 ,_sage_const_10 ), color='green', legend_label='L2') + plot(solve(biss3==_sage_const_0 ,y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), legend_label='b1') + plot(solve(biss4==_sage_const_0 ,y)[_sage_const_0 ].right(), (x,-_sage_const_10 ,_sage_const_10 ), color='black', legend_label='b2')+ point(N, color='black', xmin=-_sage_const_10 , xmax=_sage_const_10 )+text('  N',N,horizontal_alignment='left',color='black')
except:
 _st_.goboom(_sage_const_527 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_548 
 _st_.inline(_sage_const_0 , latex(M1))
except:
 _st_.goboom(_sage_const_548 )
try:
 _st_.current_tex_line = _sage_const_548 
 _st_.inline(_sage_const_1 , latex(M2))
except:
 _st_.goboom(_sage_const_548 )
try:
 _st_.current_tex_line = _sage_const_548 
 _st_.inline(_sage_const_2 , latex(ang))
except:
 _st_.goboom(_sage_const_548 )
try:
 _st_.current_tex_line = _sage_const_575 
 _st_.inline(_sage_const_3 , latex(A))
except:
 _st_.goboom(_sage_const_575 )
try:
 _st_.current_tex_line = _sage_const_575 
 _st_.inline(_sage_const_4 , latex(B))
except:
 _st_.goboom(_sage_const_575 )
try:
 _st_.current_tex_line = _sage_const_575 
 _st_.inline(_sage_const_5 , latex(C))
except:
 _st_.goboom(_sage_const_575 )
try:
 _st_.current_tex_line = _sage_const_575 
 _st_.inline(_sage_const_6 , latex(line2))
except:
 _st_.goboom(_sage_const_575 )
try:
 _st_.current_tex_line = _sage_const_575 
 _st_.inline(_sage_const_7 , vertex)
except:
 _st_.goboom(_sage_const_575 )
try:
 _st_.current_tex_line = _sage_const_575 
 _st_.inline(_sage_const_8 , vertex)
except:
 _st_.goboom(_sage_const_575 )
try:
 _st_.current_tex_line = _sage_const_575 
 _st_.inline(_sage_const_9 , vertex)
except:
 _st_.goboom(_sage_const_575 )
try:
 _st_.current_tex_line = _sage_const_575 
 _st_.inline(_sage_const_10 , vertex2)
except:
 _st_.goboom(_sage_const_575 )
try:
 _st_.current_tex_line = _sage_const_597 
 _st_.inline(_sage_const_11 , vertex)
except:
 _st_.goboom(_sage_const_597 )
try:
 _st_.current_tex_line = _sage_const_597 
 _st_.inline(_sage_const_12 , vertex)
except:
 _st_.goboom(_sage_const_597 )
try:
 _st_.current_tex_line = _sage_const_597 
 _st_.inline(_sage_const_13 , vertex2)
except:
 _st_.goboom(_sage_const_597 )
try:
 _st_.current_tex_line = _sage_const_597 
 _st_.inline(_sage_const_14 , vertex3)
except:
 _st_.goboom(_sage_const_597 )
try:
 _st_.current_tex_line = _sage_const_620 
 _st_.inline(_sage_const_15 , latex(N))
except:
 _st_.goboom(_sage_const_620 )
try:
 _st_.current_tex_line = _sage_const_620 
 _st_.inline(_sage_const_16 , latex(lineL1))
except:
 _st_.goboom(_sage_const_620 )
try:
 _st_.current_tex_line = _sage_const_620 
 _st_.inline(_sage_const_17 , latex(lineL2))
except:
 _st_.goboom(_sage_const_620 )
try:
 _st_.current_tex_line = _sage_const_647 
 _st_.inline(_sage_const_18 , latex(d))
except:
 _st_.goboom(_sage_const_647 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_19 , latex(eqang2))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_20 , latex(eqline))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_21 , latex(M1M2))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_22 , latex(x-M1[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_23 , latex(M1M2[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_24 , latex(y-M1[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_25 , latex(M1M2[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_26 , latex(eqparam))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_27 , latex(eqang))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_28 , latex(eqotr))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_29 , latex(eqnorm))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_30 , latex(cosline))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.plot(_sage_const_0 , format='notprovided', _p_=G1)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.plot(_sage_const_1 , format='notprovided', _p_=G2)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_31 , latex(eqLparal))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_32 , latex(eqLorthog))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_33 , latex(h1))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_34 , latex(h2))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_35 , latex(h1h2))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_36 , latex(vert2med))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_37 , latex(vert1h))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_38 , latex(perp))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_39 , latex(biss1))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_40 , bissstr)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_41 , latex(biss2))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_42 , latex(pp))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.plot(_sage_const_2 , format='notprovided', _p_=G4)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_43 , latex(lineL3))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_44 , latex(lineL4))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_45 , latex(lined1))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_46 , latex(lined2))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_47 , latex(lineNE))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_48 , latex(lineNF))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_49 , latex(lineEF))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_50 , latex(dNL1))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_51 , latex(n(dNL1, digits=_sage_const_4 )))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_52 , latex(lineL1norm))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_53 , intercept)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.plot(_sage_const_3 , format='notprovided', _p_=G5)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_54 , latex(d))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_55 , latex(newL(cc=cc1)))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_56 , latex(newL(cc=cc2)))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_57 , latex(lineLp))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_58 , latex(lineLq))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_59 , latex(lineLrt(cc=cc3)))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_60 , latex(lineLrt(cc=cc4)))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_61 , latex(angL1L2))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_62 , latex(round(angL1L2*_sage_const_180 /pi)))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_63 , angNstr)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_64 , angONstr)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_65 , latex(biss3))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.inline(_sage_const_66 , latex(biss4))
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.plot(_sage_const_4 , format='notprovided', _p_=G6)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.plot(_sage_const_5 , format='notprovided', _p_=G7)
except:
 _st_.goboom(_sage_const_674 )
try:
 _st_.current_tex_line = _sage_const_674 
 _st_.plot(_sage_const_6 , format='notprovided', _p_=G8)
except:
 _st_.goboom(_sage_const_674 )
_st_.endofdoc()

